(* ********************************************************************* *
   LEGO 1.3.1 port to NJ-SML 110: James McKinna 24 Nov 2008--11 Nov 2011

   Randy Pollack Special Festschrift Edition: 14 July 2012

 * ********************************************************************* *)

Dear Randy, 

     HAPPY BIRTHDAY!!!

This directory contains all you need (I hope) to rebuild your
marvellous machine on up-to-date (>= 110.74) versions of SML of NJ. 

It contains pre-built (in ./bin) images for lego and legoML for x86 on
Ubuntu 8.04, but once you have SML-NJ up and running, you should be OK. 

Features:

-- finally, it is more-or-less fully functorised; some modules are
   built as top-level structures just for convenience; 

-- hence, finally, now builds under the SML-NJ CM make system 

   (but sadly, the CML concurrency extensions used in cml require much
   more work to get going again, so I have left these as future work)

-- module Main contains all the uses of SML-NJ specials, except for
   pointer equality, UNSAFEeq, which is defined in structure Utils,
   and used once in structure Namespace for intros 

   (so could port to other SML implementations without too much grief)

-- Unix binary for lego now can take an optional list of files and "Make" them 

-- New commands: 
   
   -- "Init U" initialies with Type:Type

   -- "Undo" without argument for undo of last tactical (equiv. to "Undo 1")

   -- "UndoAll" without argument for undo back to top-level goal (replaces "Undo ~999999")

To build: 

-- in directory ./src run the compiler: 

   sml

-- at the prompt, type: 

   val _ = CM.make"sources.cm";

-- this will build a lego heap image in bin/lego, and legoML in bin/legoML as usual

   alternatively, make_lego b msg will build such images: 
   
   -- if b=true, then build "lego" and exit 
      (SML-NJ standalone binaries seem to be no longer possible to build?)
   -- if b=false, then build "legoML" and return to ML compiler layer

To run: 

-- with appropriate paths (I have added symlinks to bin and lib from src, for ease)

   sml @SMLload=bin/lego
   sml @SMLload=bin/legoML

   will do the right thing

-- in each case, CTRL-D will exit the process 
   (a lexer bug? or else my failure to understand call/cc-style prompts), 
   while "Drop" will take you to the ML layer in legoML

-- to resume lego from the ML layer, type

   val _ = Main.legoML();

Have fun, and once again, a very happy 65th birthday to you!

James. 





Module lib_nat_div Import "lib_nat_rels" "lib_bool_thms";
[half : {n:nat}nat
  = nat_elim ([n:nat]nat) zero ([n,half_n:nat]if%%nat (even n) half_n (suc half_n))];
[even_pred : {n|nat}{b|bool}(Eq%%bool (even (suc n)) (inv b))->Eq%%bool (even n) b
  = nat_ind ([n:nat]{b|bool}(Eq%%bool (even (suc n)) (inv b))->Eq%%bool (even n) b) (bool_elim ([b:bool](Eq%%bool (even (suc zero)) (inv b))->Eq%%bool (even zero) b) ([H:Eq%%bool (even (suc zero)) (inv true)]Eq_refl%%bool (even zero)) (Eq_sym%%bool%%(even (suc zero))%%(inv false))) ([n:nat][H:{b|bool}(Eq%%bool (even (suc n)) (inv b))->Eq%%bool (even n) b]bool_elim ([b:bool](Eq%%bool (even (suc (suc n))) (inv b))->Eq%%bool (even (suc n)) b) ([H1:Eq%%bool (even (suc (suc n))) (inv true)]snd%%((Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) true)->Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv true))%%((Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv true))->Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) true) (inv_character' (nat_elim ([_:nat]bool) true ([_:nat]inv) n) true) (H%%(inv true) (snd%%((Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) (inv (inv true)))->Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv (inv (inv true))))%%((Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv (inv (inv true))))->Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) (inv (inv true))) (inv_character' (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv (inv true))) (Eq_trans%%bool%%(nat_elim ([_:nat]bool) true ([_:nat]inv) n)%%(even (suc (suc n)))%%(inv (inv (inv true))) (Eq_sym%%bool%%(even (suc (suc n)))%%(nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv_idemp (nat_elim ([_:nat]bool) true ([_:nat]inv) n))) H1)))) ([H1:Eq%%bool (even (suc (suc n))) (inv false)]snd%%((Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) false)->Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv false))%%((Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv false))->Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) false) (inv_character' (nat_elim ([_:nat]bool) true ([_:nat]inv) n) false) (H%%(inv false) (snd%%((Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) (inv (inv false)))->Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv (inv (inv false))))%%((Eq%%bool (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv (inv (inv false))))->Eq%%bool (inv (nat_elim ([_:nat]bool) true ([_:nat]inv) n)) (inv (inv false))) (inv_character' (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv (inv false))) (Eq_trans%%bool%%(nat_elim ([_:nat]bool) true ([_:nat]inv) n)%%(even (suc (suc n)))%%(inv (inv (inv false))) (Eq_sym%%bool%%(even (suc (suc n)))%%(nat_elim ([_:nat]bool) true ([_:nat]inv) n) (inv_idemp (nat_elim ([_:nat]bool) true ([_:nat]inv) n))) H1)))))];
[half_even : {n:nat}((is_true (even n))->Eq%%nat (times two (half n)) n /\ (is_false (even n))->Eq%%nat (suc (times two (half n))) n)
  = nat_ind ([n:nat]((is_true (even n))->Eq%%nat (times two (half n)) n /\ (is_false (even n))->Eq%%nat (suc (times two (half n))) n)) (pair%%((is_true (even zero))->Eq%%nat (times two (half zero)) zero)%%((is_false (even zero))->Eq%%nat (suc (times two (half zero))) zero) ([H:is_true (even zero)]Eq_refl%%nat (times two (half zero))) ([H:is_false (even zero)]true_not_false H (Eq%%nat (suc (times two (half zero))) zero))) ([n:nat][H:(is_true (even n))->Eq%%nat (times two (half n)) n /\ (is_false (even n))->Eq%%nat (suc (times two (half n))) n]H%%((is_true (even (suc n)))->Eq%%nat (times two (half (suc n))) (suc n) /\ (is_false (even (suc n)))->Eq%%nat (suc (times two (half (suc n)))) (suc n)) ([H1:(is_true (even n))->Eq%%nat (times two (half n)) n][H2:(is_false (even n))->Eq%%nat (suc (times two (half n))) n]bool_elim ([b:bool](Eq%%bool (even n) b)->((is_true (inv b))->Eq%%nat (times two (half (suc n))) (suc n) /\ (is_false (inv b))->Eq%%nat (suc (times two (half (suc n)))) (suc n))) ([n_even:Eq%%bool (even n) true]pair%%((is_true (inv true))->Eq%%nat (times two (half (suc n))) (suc n))%%((is_false (inv true))->Eq%%nat (suc (times two (half (suc n)))) (suc n)) ([H3:is_true (inv true)]true_not_false (Eq_sym%%bool%%false%%true H3) (Eq%%nat (times two (half (suc n))) (suc n))) ([H3:is_false (inv true)]Eq_resp%%nat%%nat suc%%(times two (half (suc n)))%%n (Eq_subst%%bool%%true%%(even n) (Eq_sym%%bool%%(even n)%%true n_even) ([z:bool]Eq%%nat (times two (if%%nat z (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n) (suc (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n)))) n) (H1 n_even)))) ([n_odd:Eq%%bool (even n) false]pair%%((is_true (inv false))->Eq%%nat (times two (half (suc n))) (suc n))%%((is_false (inv false))->Eq%%nat (suc (times two (half (suc n)))) (suc n)) ([H3:is_true (inv false)]Eq_subst%%bool%%false%%(even n) (Eq_sym%%bool%%(even n)%%false n_odd) ([z:bool]Eq%%nat (times two (if%%nat z (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n) (suc (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n)))) (suc n)) (Eq_resp%%nat%%nat suc%%(nat_elim ([_:nat]nat) (nat_elim ([_:nat]nat) zero ([_:nat]plus (if%%nat false (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n) (suc (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n)))) one) ([_:nat]suc) (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n))%%n (Eq_subst%%nat%%(suc (half n))%%(plus (suc (half n)) zero) (Eq_sym%%nat%%(plus (suc (half n)) zero)%%(suc (half n)) (plus_zero (suc (half n)))) ([z:nat]Eq%%nat (nat_elim ([_:nat]nat) z ([_:nat]suc) (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n)) n) (Eq_trans%%nat%%(nat_elim ([_:nat]nat) (suc (half n)) ([_:nat]suc) (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n))%%(plus (suc (half n)) (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n))%%n (plus_commutes (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n) (suc (half n))) (Eq_trans%%nat%%(plus (suc (half n)) (nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n))%%(suc (times two (half n)))%%n (Eq_resp%%nat%%nat (plus (suc (half n)))%%(nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n)%%(nat_elim ([_:nat]nat) zero ([_:nat]plus (half n)) one) (Eq_sym%%nat%%(plus (half n) zero)%%(nat_elim ([n'2:nat]nat) zero ([n'2,half_n:nat]if%%nat (even n'2) half_n (suc half_n)) n) (plus_zero (half n)))) (H2 n_odd)))))) ([H3:is_false (inv false)]true_not_false H3 (Eq%%nat (suc (times two (half (suc n)))) (suc n)))) (nat_elim ([_:nat]bool) true ([_:nat]inv) n) (Eq_refl%%bool (even n))))];

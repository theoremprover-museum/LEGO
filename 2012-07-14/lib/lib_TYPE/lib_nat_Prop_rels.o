Module lib_nat_Prop_rels Import "lib_nat_Lt" "lib_nat_Le";
[Lt_Le_trans : {x,y,z|nat}(Lt x y)->(Le y z)->Lt x z
  = [x,y,z|nat][H:Lt x y][H1:Le y z]H (Lt x z) ([t:nat][H2:Eq%%nat (plus x (suc t)) y]H1 (Lt x z) ([t1:nat][H3:Eq%%nat (plus y t1) z]ExIntro%%nat (plus t t1) ([k:nat]Eq%%nat (plus x (suc k)) z) (Eq_subst%%nat%%(plus y t1)%%z (Eq_sym%%nat%%z%%(plus y t1) (Eq_sym%%nat%%(plus y t1)%%z H3)) ([z'1:nat]Eq%%nat (plus x (suc (plus t t1))) z'1) (Eq_subst%%nat%%(plus x (suc t))%%y (Eq_sym%%nat%%y%%(plus x (suc t)) (Eq_sym%%nat%%(plus x (suc t))%%y H2)) ([z'1:nat]Eq%%nat (plus x (suc (plus t t1))) (plus z'1 t1)) (Eq_subst%%nat%%(suc (plus x (plus t t1)))%%(plus x (suc (plus t t1))) (Eq_sym%%nat%%(plus x (suc (plus t t1)))%%(suc (plus x (plus t t1))) (plus_suc x (plus t t1))) ([z'1:nat]Eq%%nat z'1 (plus (plus x (suc t)) t1)) (Eq_subst%%nat%%(suc (plus x t))%%(plus x (suc t)) (Eq_sym%%nat%%(plus x (suc t))%%(suc (plus x t)) (plus_suc|x|t)) ([z'1:nat]Eq%%nat (suc (plus x (plus t t1))) (plus z'1 t1)) (Eq_resp%%nat%%nat suc%%(plus x (plus t t1))%%(nat_elim ([_:nat]nat) t1 ([_:nat]suc) (plus x t)) (Eq_sym%%nat%%(plus (plus x t) t1)%%(plus x (plus t t1)) (plus_assoc x t t1)))))))))];
[Le_Lt_trans : {x,y,z|nat}(Le x y)->(Lt y z)->Lt x z
  = [x,y,z|nat][H:Le x y][H1:Lt y z]H (Lt x z) ([t:nat][H2:Eq%%nat (plus x t) y]H1 (Lt x z) ([t1:nat][H3:Eq%%nat (plus y (suc t1)) z]ExIntro%%nat (plus t t1) ([k:nat]Eq%%nat (plus x (suc k)) z) (Eq_subst%%nat%%(plus y (suc t1))%%z (Eq_sym%%nat%%z%%(plus y (suc t1)) (Eq_sym%%nat%%(plus y (suc t1))%%z H3)) ([z'1:nat]Eq%%nat (plus x (suc (plus t t1))) z'1) (Eq_subst%%nat%%(plus x t)%%y (Eq_sym%%nat%%y%%(plus x t) (Eq_sym%%nat%%(plus x t)%%y H2)) ([z'1:nat]Eq%%nat (plus x (suc (plus t t1))) (plus z'1 (suc t1))) (Eq_subst%%nat%%(suc (plus x (plus t t1)))%%(plus x (suc (plus t t1))) (Eq_sym%%nat%%(plus x (suc (plus t t1)))%%(suc (plus x (plus t t1))) (plus_suc x (plus t t1))) ([z'1:nat]Eq%%nat z'1 (plus (plus x t) (suc t1))) (Eq_subst%%nat%%(suc (plus (plus x t) t1))%%(plus (plus x t) (suc t1)) (Eq_sym%%nat%%(plus (plus x t) (suc t1))%%(suc (plus (plus x t) t1)) (plus_suc (plus x t) t1)) ([z'1:nat]Eq%%nat (suc (plus x (plus t t1))) z'1) (Eq_resp%%nat%%nat suc%%(plus x (plus t t1))%%(plus (plus x t) t1) (Eq_sym%%nat%%(plus (plus x t) t1)%%(plus x (plus t t1)) (plus_assoc x t t1)))))))))];
[Lt_imp_Le : {x,y:nat}(Lt x y)->Le x y
  = [x,y:nat][H:Lt x y]H (Le x y) ([t:nat][H1:Eq%%nat (plus x (suc t)) y]ExIntro%%nat (suc t) ([k:nat]Eq%%nat (plus x k) y) H1)];
[Lt_Le_resp_plus : {x,y,a,b:nat}(Lt x y)->(Le a b)->Lt (plus x a) (plus y b)
  = [x,y,a,b:nat][h1:Lt x y][h2:Le a b]Le_Lt_trans%%(plus x a)%%(plus x b)%%(plus y b) (Le_resp_plus a b x h2) (Eq_subst%%nat%%(plus b x)%%(plus x b) (Eq_sym%%nat%%(plus x b)%%(plus b x) (plus_commutes x b)) ([z:nat]Lt z (plus y b)) (Eq_subst%%nat%%(plus b y)%%(plus y b) (Eq_sym%%nat%%(plus y b)%%(plus b y) (plus_commutes y b)) ([z:nat]Lt (plus b x) z) (Lt_resp_plus x y b h1)))];
[Le_Lt_resp_plus : {x,y,a,b:nat}(Le x y)->(Lt a b)->Lt (plus x a) (plus y b)
  = [x,y,a,b:nat][h1:Le x y][h2:Lt a b]Lt_Le_trans%%(plus x a)%%(plus x b)%%(plus y b) (Lt_resp_plus a b x h2) (Eq_subst%%nat%%(plus b x)%%(plus x b) (Eq_sym%%nat%%(plus x b)%%(plus b x) (plus_commutes x b)) ([z:nat]Le z (plus y b)) (Eq_subst%%nat%%(plus b y)%%(plus y b) (Eq_sym%%nat%%(plus y b)%%(plus b y) (plus_commutes y b)) ([z:nat]Le (plus b x) z) (Le_resp_plus x y b h1)))];
[decide_nat : {x,y:nat}(Le x y \/ Lt y x)
  = [x,y:nat]nat_diagonal_ind ([x'3,y'4:nat](Le x'3 y'4 \/ Lt y'4 x'3)) ([m:nat]inl%%(Le zero m)%%(Lt m zero) (Le_zero_n m)) ([n:nat]inr%%(Le (suc n) zero)%%(Lt zero (suc n)) (zero_Lt_suc_n n)) ([n,m:nat][H:Le n m \/ Lt m n]H%%(Le (suc n) (suc m) \/ Lt (suc m) (suc n)) ([H1:Le n m]inl%%(Le (suc n) (suc m))%%(Lt (suc m) (suc n)) (Le_resp_suc n m H1)) ([H1:Lt m n]inr%%(Le (suc n) (suc m))%%(Lt (suc m) (suc n)) (Lt_resp_suc m n H1))) x y];
[Le_is_Lt_or_Eq : {x,y:nat}(Le x y)->(Lt x y \/ Eq%%nat x y)
  = [x,y:nat][H:Le x y]decide_nat y x%%(Lt x y \/ Eq%%nat x y) ([H1:Le y x]inr%%(Lt x y)%%(Eq%%nat x y) (Le_antisym y x H1 H)) ([H1:Lt x y]inl%%(Lt x y)%%(Eq%%nat x y) H1)];
[zero_or_pos : {n:nat}(Eq%%nat n zero \/ Lt zero n)
  = [n:nat]Le_is_Lt_or_Eq zero n (Le_zero_n n)%%(Eq%%nat n zero \/ Lt zero n) (inr%%(Eq%%nat n zero)%%(Lt zero n)) ([H:Eq%%nat zero n]inl%%(Eq|nat n zero)%%(Lt zero n) (Eq_sym%%nat%%zero%%n H))];
[Lt_imp_Le_suc : {x,y:nat}(Lt x (suc y))->Le x y
  = [x,y:nat][H:Lt x (suc y)]H (Le x y) ([t:nat][H1:Eq%%nat (plus x (suc t)) (suc y)]ExIntro%%nat t ([k:nat]Eq%%nat (plus x k) y) (Eq_resp%%nat%%nat pred|(suc (plus x t))|(suc y) (Eq_trans%%nat%%(suc (plus x t))%%(plus x (suc t))%%(suc y) (Eq_sym%%nat%%(plus x (suc t))%%(suc (plus x t)) (plus_suc x t)) H1)))];
[Le_imp_Lt_suc : {x,y:nat}(Le x y)->Lt x (suc y)
  = [x,y:nat][H:Le x y]H (Lt x (suc y)) ([t:nat][H1:Eq%%nat (plus x t) y]ExIntro%%nat t ([k:nat]Eq%%nat (plus x (suc k)) (suc y)) (Eq_trans%%nat%%(plus x (suc t))%%(suc (plus x t))%%(suc y) (plus_suc x t) (Eq_resp%%nat%%nat suc%%(plus x t)%%y H1)))];
[Lt_resp_times_both : {x,y,a,b:nat}(Lt x y)->(Lt a b)->Lt (times a x) (times b y)
  = [x,y,a,b:nat][H:Lt x y][H1:Lt a b]Le_Lt_trans%%(times a x)%%(times a y)%%(times b y) (Le_resp_times x y a (Lt_imp_Le x y H)) (Eq_subst%%nat%%(times y a)%%(times a y) (Eq_sym%%nat%%(times a y)%%(times y a) (times_commutes|a|y)) ([z:nat]Lt z (times b y)) (Eq_subst%%nat%%(times y b)%%(times b y) (Eq_sym%%nat%%(times b y)%%(times y b) (times_commutes|b|y)) ([z:nat]Lt (times y a) z) (H (Lt (times y a) (times y b)) ([t:nat][H2:Eq%%nat (plus x (suc t)) y]Eq_subst%%nat%%(plus x (suc t))%%y (Eq_sym%%nat%%y%%(plus x (suc t)) (Eq_sym%%nat%%(plus x (suc t))%%y H2)) ([z:nat]Lt (times z a) (times z b)) (Eq_subst%%nat%%(suc (plus x t))%%(plus x (suc t)) (Eq_sym%%nat%%(plus x (suc t))%%(suc (plus x t)) (plus_suc x t)) ([z:nat]Lt (times z a) (times z b)) (Lt_resp_times a b (plus x t) H1))))))];
[Lt_imp_Le_suc' : {x,y:nat}(Lt x y)->Le (suc x) y
  = [x,y:nat][H:Lt x y]Lt_imp_Le_suc (suc x) y (Lt_resp_suc x y H)];
[Le_imp_Lt_suc' : {x,y:nat}(Le (suc x) y)->Lt x y
  = [x,y:nat][H:Le (suc x) y]Lt_resp_pred x y (Le_imp_Lt_suc (suc x) y H)];
[minus_well_le : {m,n:nat}(Lt zero m)->(Le m n)->Lt (plus (minus n m) m) (plus n m)
  = [m,n:nat][H:Lt zero m][H1:Le m n]Eq_subst%%nat%%n%%(plus (minus n m) m) (Eq_sym%%nat%%(plus (minus n m) m)%%n (Eq_sym%%nat%%n%%(plus (minus n m) m) (plus_inv_minus m n H1))) ([z:nat]Lt z (plus n m)) (Le_Lt_trans%%n%%(plus n zero)%%(plus n m) (eq_imp_Le n (plus n zero) (Eq_sym%%nat%%(plus n zero)%%n (plus_zero|n))) (Lt_resp_plus zero m n H))];
[not_Le_imp_Lt : {x,y:nat}(not (Le x y))->Lt y x
  = nat_diagonal_ind ([x,y:nat](not (Le x y))->Lt y x) ([m:nat][H:not (Le zero m)]H (Le_zero_n m) (Lt m zero)) ([n:nat][H:not (Le (suc n) zero)]zero_Lt_suc_n n) ([n,m:nat][H:(not (Le n m))->Lt m n][H1:not (Le (suc n) (suc m))]Lt_resp_suc m n (H ([H2:Le n m]H1 (Le_resp_suc n m H2))))];
[not_Lt_imp_Le : {x,y:nat}(not (Lt x y))->Le y x
  = nat_diagonal_ind ([x,y:nat](not (Lt x y))->Le y x) (nat_ind ([m:nat](not (Lt zero m))->Le m zero) ([H:not (Lt zero zero)]Le_zero_n zero) ([n:nat][H:(not (Lt zero n))->Le n zero][H1:not (Lt zero (suc n))]H1 (zero_Lt_suc_n n) (Le (suc n) zero))) ([n:nat][H:not (Lt (suc n) zero)]Le_zero_n (suc n)) ([n,m:nat][H:(not (Lt n m))->Le m n][H1:not (Lt (suc n) (suc m))]Le_resp_suc m n (H ([H2:Lt n m]H1 (Lt_resp_suc n m H2))))];
[Le_minus_zero : {a,b:nat}(Le a b)->Eq%%nat (minus a b) zero
  = nat_ind ([a:nat]{b:nat}(Le a b)->Eq%%nat (minus a b) zero) ([b:nat][H:Le zero b]zero_minus_n_Eq_zero b) ([n:nat][H:{b:nat}(Le n b)->Eq%%nat (minus n b) zero][b:nat][H1:Le (suc n) b]ze_Lt_imp_Eq_suc b (Lt_Le_trans%%zero%%(suc n)%%b (zero_Lt_suc_n n) H1) (Eq%%nat (minus (suc n) b) zero) ([t:nat][H2:Eq%%nat b (suc t)]Eq_subst%%nat%%(suc t)%%b (Eq_sym%%nat%%b%%(suc t) H2) ([z:nat]Eq%%nat (minus (suc n) z) zero) (Eq_subst%%nat%%(minus n t)%%(minus (suc n) (suc t)) (Eq_sym%%nat%%(minus (suc n) (suc t))%%(minus n t) (minus_resp_suc n t)) ([z:nat]Eq%%nat z zero) (H t (Le_resp_pred n t (Eq_subst%%nat%%b%%(suc t) H2 (Le (suc n)) H1))))))];
[Le_resp_minus : {a,b,c:nat}(Le a b)->Le (minus c b) (minus c a)
  = [a,b,c:nat][H:Le a b]decide_nat b c%%(Le (minus c b) (minus c a)) ([H1:Le b c]Le_resp_sub (minus c b) (minus c a) a (Eq_subst%%nat%%(plus (minus c a) a)%%(plus a (minus c a)) (plus_commutes|(minus c a)|a) (Le (plus a (minus c b))) (Eq_subst%%nat%%c%%(plus (minus c a) a) (plus_inv_minus a c (Le_trans%%a%%b%%c H H1)) (Le (plus a (minus c b))) (Eq_subst%%nat%%(plus (minus c b) b)%%c (Eq_sym%%nat%%c%%(plus (minus c b) b) (plus_inv_minus b c H1)) (Le (plus a (minus c b))) (Eq_subst%%nat%%(plus (minus c b) a)%%(plus a (minus c b)) (Eq_sym%%nat%%(plus a (minus c b))%%(plus (minus c b) a) (plus_commutes|a|(minus c b))) ([z:nat]Le z (plus (minus c b) b)) (Le_resp_plus a b (minus c b) H)))))) ([H1:Lt c b]Eq_subst%%nat%%zero%%(minus c b) (Eq_sym%%nat%%(minus c b)%%zero (Le_minus_zero c b (Lt_imp_Le c b H1))) ([z:nat]Le z (minus c a)) (Le_zero_n (minus c a)))];

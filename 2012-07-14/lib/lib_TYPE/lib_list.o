Module lib_list Import "lib_eq_basics";
$[list : {t:SET}SET//nil cons];
$[nil : {t:SET}list t];
$[cons : {t|SET}t->(list t)->list t];
$[list_elim : {t|SET}{C_list:(list t)->TYPE}(C_list (nil t))->({x1:t}{x2:list t}{x2_ih:C_list x2}C_list (cons%%t x1 x2))->{z:list t}C_list z];
Label (!list!) list;Label (!list elim!) list_elim;Label (!list nil!) nil;Label (!list cons!) cons;[[t|SET][C_list:(list t)->TYPE][f_nil:C_list (nil t)][f_cons:{x1:t}{x2:list t}(C_list x2)->C_list (cons x1 x2)][x1:t][x2:list t]   list_elim C_list f_nil f_cons (nil t)  ==>  f_nil|| list_elim C_list f_nil f_cons (cons x1 x2)  ==>  f_cons x1 x2 (list_elim C_list f_nil f_cons x2)]
;
[cons1 : {t:SET}{x:t}{l:list t}list t
  = [t:SET][x:t][l:list t]cons%%t x l];
[list_rec : {s|SET}{t|TYPE}t->(s->(list s)->t->t)->(list s)->t
  = [s|SET][t|TYPE]list_elim|s ([_:list s]t)];
[list_iter : {s|SET}{t|TYPE}t->(s->t->t)->(list s)->t
  = [s|SET][t|TYPE][x:t][f:s->t->t]list_rec%%s%%t x ([y:s][_:list s]f y)];
[list_ind : {s|SET}{P:(list s)->Prop}(P (nil s))->({x:s}{l:list s}(P l)->P (cons%%s x l))->{l:list s}P l
  = [s|SET][P:(list s)->Prop]list_elim|s P];
[list_double_elim : {s|SET}{T:(list s)->(list s)->TYPE}(T (nil s) (nil s))->({x:s}{l:list s}(T (nil s) l)->T (nil s) (cons%%s x l))->({x:s}{l:list s}({l':list s}T l l')->T (cons%%s x l) (nil s))->({x:s}{l:list s}({l':list s}T l l')->{y:s}{l':list s}(T (cons%%s x l) l')->T (cons%%s x l) (cons%%s y l'))->{l,l':list s}T l l'
  = [s|SET][T:(list s)->(list s)->TYPE][bb:T (nil s) (nil s)][bs:{x:s}{l:list s}(T (nil s) l)->T (nil s) (cons%%s x l)][sb:{x:s}{l:list s}({l':list s}T l l')->T (cons%%s x l) (nil s)][ss:{x:s}{l:list s}({l':list s}T l l')->{y:s}{l':list s}(T (cons%%s x l) l')->T (cons%%s x l) (cons%%s y l')]list_elim%%s ([l:list s]{l':list s}T l l') (list_elim%%s (T (nil s)) bb bs) ([b:s][x:list s][h:{l':list s}T x l']list_elim%%s (T (cons%%s b x)) (sb b x h) (ss b x h))];
[is_nil : {t|SET}(list t)->Prop
  = [t|SET][l:list t]Eq%%(list t) (nil t) l];
[is_cons : {t|SET}(list t)->Prop
  = [t|SET][l:list t]Ex%%t ([x:t]Ex%%(list t) ([l':list t]Eq%%(list t) (cons%%t x l') l))];
[nil_or_cons : {t|SET}{l:list t}(is_nil%%t l \/ is_cons%%t l)
  = [t|SET]list_ind%%t ([l:list t](is_nil%%t l \/ is_cons%%t l)) (inl%%(is_nil%%t (nil t))%%(is_cons%%t (nil t)) (Eq_refl%%(list t) (nil t))) ([x:t][l:list t][H:is_nil%%t l \/ is_cons%%t l]inr%%(is_nil%%t (cons%%t x l))%%(is_cons%%t (cons%%t x l)) (ExIntro%%t x ([x'5:t]Ex%%(list t) ([l':list t]Eq%%(list t) (cons%%t x'5 l') (cons%%t x l))) (ExIntro%%(list t) l ([l':list t]Eq%%(list t) (cons%%t x l') (cons%%t x l)) (Eq_refl%%(list t) (cons%%t x l)))))];
[nil_not_cons : {t|SET}{l:list t}{x:t}not (Eq%%(list t) (nil t) (cons%%t x l))
  = [t|SET][l:list t][x:t][H:Eq%%(list t) (nil t) (cons%%t x l)][isT=list_iter%%t%%Prop trueProp ([_:t][_:Prop]absurd)]Eq_subst%%(list t)%%(nil t)%%(cons%%t x l) (Eq_sym%%(list t)%%(cons%%t x l)%%(nil t) (Eq_sym%%(list t)%%(nil t)%%(cons%%t x l) H)) ([z:list t]isT z) PropId];

Module lib_nat Import "lib_bool";
$[nat : SET//zero suc];
$[zero : nat];
$[suc : nat->nat];
$[nat_elim : {C_nat:nat->TYPE}(C_nat zero)->({x1:nat}{x1_ih:C_nat x1}C_nat (suc x1))->{z:nat}C_nat z];
Label (!nat!) nat;Label (!nat elim!) nat_elim;Label (!nat zero!) zero;Label (!nat suc!) suc;[[C_nat:nat->TYPE][f_zero:C_nat zero][f_suc:{x1:nat}(C_nat x1)->C_nat (suc x1)][x1:nat]   nat_elim C_nat f_zero f_suc zero  ==>  f_zero|| nat_elim C_nat f_zero f_suc (suc x1)  ==>  f_suc x1 (nat_elim C_nat f_zero f_suc x1)]
;
Generate (!nat is zero!) [nat_is_zero : {z:nat}TYPE_minus1
  = nat_elim ([_:nat]TYPE_minus1) trivType ([x1:nat][x1_ih:Type]emptyType)];
Generate (!nat is suc!) [nat_is_suc : {z:nat}TYPE_minus1
  = nat_elim ([_:nat]TYPE_minus1) emptyType ([x1:nat][x1_ih:Type]trivType)];
Generate (!nat zero injective!) [nat_zero_injective : {zero_hyp:Eq%%nat zero zero}{P|SET}{zero_trick:P}P
  = [zero_hyp:Eq%%nat zero zero][P|SET][zero_trick:P]zero_trick];
Generate (!nat suc injective!) [nat_suc_injective : {ix0,iy0|nat}{suc_hyp:Eq%%nat (suc ix0) (suc iy0)}{P|SET}{suc_trick:{ix0eq:Eq%%nat ix0 iy0}P}P
  = [ix0,iy0|nat][suc_hyp:Eq%%nat (suc ix0) (suc iy0)][P|SET][suc_trick:{ix0eq:Eq%%nat ix0 iy0}P]suc_trick (Eq_subst%%nat%%(suc ix0)%%(suc iy0) suc_hyp ([suc_term:nat]Eq%%nat ix0 (nat_elim ([_:nat]nat) ix0 ([x1,x1_ih:nat]x1) suc_term)) (Eq_refl%%nat ix0))];
[nat_rec : {t|TYPE}t->(nat->t->t)->nat->t
  = [t|TYPE]nat_elim ([_:nat]t)];
[nat_iter : {t|TYPE}t->(t->t)->nat->t
  = [t|TYPE][x:t][f:t->t]nat_rec%%t x ([_:nat]f)];
[nat_ind : {P:nat->Prop}(P zero)->({n:nat}(P n)->P (suc n))->{n:nat}P n
  = [P:nat->Prop]nat_elim P];
[nat_double_elim : {T:nat->nat->TYPE}(T zero zero)->({n:nat}(T zero n)->T zero (suc n))->({m:nat}({n:nat}T m n)->T (suc m) zero)->({m:nat}({n:nat}T m n)->{n:nat}(T (suc m) n)->T (suc m) (suc n))->{m,n:nat}T m n
  = [T:nat->nat->TYPE][bb_step:T zero zero][bs_step:{n:nat}(T zero n)->T zero (suc n)][sb_step:{m:nat}({n:nat}T m n)->T (suc m) zero][ss_step:{m:nat}({n:nat}T m n)->{n:nat}(T (suc m) n)->T (suc m) (suc n)]nat_elim ([m:nat]{n:nat}T m n) (nat_elim (T zero) bb_step bs_step) ([m:nat][h:{n:nat}T m n]nat_elim (T (suc m)) (sb_step m h) (ss_step m h))];
[nat_diagonal_iter : {C|TYPE}(nat->C)->(nat->C)->(C->C)->nat->nat->C
  = [C|TYPE][fst_zero,snd_zero:nat->C][inc:C->C]nat_rec|(nat->C) fst_zero ([n:nat][f:nat->C]nat_rec%%C (snd_zero (suc n)) ([H:nat][H1:C]inc (f H)))];
[nat_diagonal_ind : {phi:nat->nat->Prop}({m:nat}phi zero m)->({n:nat}phi (suc n) zero)->({n,m:nat}(phi n m)->phi (suc n) (suc m))->{n,m:nat}phi n m
  = [phi:nat->nat->Prop][H:{m:nat}phi zero m][H1:{n:nat}phi (suc n) zero][H2:{n,m:nat}(phi n m)->phi (suc n) (suc m)][n,m:nat]nat_ind ([n'7:nat]{m'8:nat}phi n'7 m'8) H ([n1:nat][H3:{m'8:nat}phi n1 m'8][m1:nat]nat_ind ([m'10:nat]phi (suc n1) m'10) (H1 n1) ([n2:nat][H4:phi (suc n1) n2]H2 n1 n2 (H3 n2)) m1) n m];
[nat_d_rec_for_int : {C:nat->nat->TYPE}{d:C zero zero}{e:{m,n:nat}(C m n)->C (suc m) n}{f:{m,n:nat}(C m n)->C m (suc n)}{m,n:nat}C m n
  = [C:nat->nat->TYPE][d:C zero zero][e:{m,n:nat}(C m n)->C (suc m) n][f:{m,n:nat}(C m n)->C m (suc n)][m,n:nat]nat_elim ([x:nat]C x n) (nat_elim ([x:nat]C zero x) d (f zero) n) ([x:nat]e x n) m];
[is_suc : nat->Prop
  = [n:nat]Ex%%nat ([m:nat]Eq%%nat (suc m) n)];
[is_zero : nat->Prop
  = [n:nat]Eq%%nat zero n];
[zero_not_suc : {n:nat}not (Eq%%nat zero (suc n))
  = [n:nat][H:Eq%%nat zero (suc n)]true_not_false (Eq_resp%%nat%%bool (nat_rec%%bool true ([_:nat][_:bool]false))%%zero%%(suc n) H)];
[suc_not_zero : not (is_suc zero)
  = [h:is_suc zero]h absurd ([t:nat][H:Eq%%nat (suc t) zero]zero_not_suc t (Eq_sym%%nat%%(suc t)%%zero H))];
[suc_n_not_n : {n:nat}not (Eq%%nat (suc n) n)
  = nat_elim ([n:nat]not (Eq%%nat (suc n) n)) ([H:Eq%%nat (suc zero) zero]Eq_subst%%nat%%(suc zero)%%zero H (!nat is suc!) ([Thaha|Type][haha:Thaha]haha)%%absurd) ([x1:nat][x1_ih:(Eq%%nat (suc x1) x1)->absurd][H:Eq%%nat (suc (suc x1)) (suc x1)](!nat suc injective!)%%(suc x1)%%x1 H%%absurd ([ix0eq:Eq%%nat (suc x1) x1]x1_ih ix0eq))];
Configure Qnify nat suc_n_not_n ;
[zero_or_suc : {n:nat}(Eq%%nat n zero \/ is_suc n)
  = nat_ind ([n:nat](Eq%%nat n zero \/ is_suc n)) (inl%%(Eq%%nat zero zero)%%(is_suc zero) (Eq_refl%%nat zero)) ([n:nat][H:Eq%%nat n zero \/ is_suc n]inr%%(Eq%%nat (suc n) zero)%%(is_suc (suc n)) (ExIntro%%nat n ([m:nat]Eq%%nat (suc m) (suc n)) (Eq_refl%%nat (suc n))))];
[one : nat
  = suc zero];
[two : nat
  = suc one];
[three : nat
  = suc two];
[four : nat
  = suc three];
[five : nat
  = suc four];
[six : nat
  = suc five];
[seven : nat
  = suc six];
[eight : nat
  = suc seven];
[nine : nat
  = suc eight];
[ten : nat
  = suc nine];
[plus : nat->nat->nat
  = [m,n:nat]nat_iter%%nat n suc m];
[times : nat->nat->nat
  = [m,n:nat]nat_iter%%nat zero (plus n) m];
[exp : nat->nat->nat
  = [m,n:nat]nat_iter%%nat one (times m) n];
[pred : nat->nat
  = nat_rec%%nat zero ([n,_:nat]n)];
[minus : nat->nat->nat
  = [m,n:nat]nat_iter%%nat m pred n];
[ackerman : nat->nat->nat
  = nat_rec%%(nat->nat) (plus one) ([_:nat][f:nat->nat]nat_rec%%nat (f one) ([_,n:nat]f n))];
[if_zero : {t|TYPE}nat->t->t->t
  = [t|TYPE][n:nat][x,y:t]nat_iter%%t x ([_:t]y) n];
[fact : nat->nat
  = nat_elim ([n:nat]nat) one ([n,fact_n:nat]times (suc n) fact_n)];
[zero_not_one : not (Eq%%nat zero one)
  = zero_not_suc zero];

Module lib_adt_array Import "lib_nat" "lib_adt_basics";
$[Str_ARRAY : STR//make_Str_ARRAY];
$[make_Str_ARRAY : {Array:Setoid}{newarray:dom Array}{assign:nat->(dom Array)->nat->dom Array}{access:(dom Array)->nat->nat}Str_ARRAY];
$[Str_ARRAY_elim : {C_Str_ARRAY:Str_ARRAY->Type}({Array:Setoid}{newarray:dom Array}{assign:nat->(dom Array)->nat->dom Array}{access:(dom Array)->nat->nat}C_Str_ARRAY (make_Str_ARRAY Array newarray assign access))->{z:Str_ARRAY}C_Str_ARRAY z];
[[C_Str_ARRAY:Str_ARRAY->Type][f_make_Str_ARRAY:{Array:Setoid}{newarray:dom Array}{assign:nat->(dom Array)->nat->dom Array}{access:(dom Array)->nat->nat}C_Str_ARRAY (make_Str_ARRAY Array newarray assign access)][Array:Setoid][newarray:dom Array][assign:nat->(dom Array)->nat->dom Array][access:(dom Array)->nat->nat]   Str_ARRAY_elim C_Str_ARRAY f_make_Str_ARRAY (make_Str_ARRAY Array newarray assign access)  ==>  f_make_Str_ARRAY Array newarray assign access]
;
[Array : {z:Str_ARRAY}Setoid
  = Str_ARRAY_elim ([Str_ARRAY_var:Str_ARRAY]Setoid) ([Array:Setoid][newarray:dom Array][assign:nat->(dom Array)->nat->dom Array][access:(dom Array)->nat->nat]Array)];
[newarray : {z:Str_ARRAY}dom (Array z)
  = Str_ARRAY_elim ([Str_ARRAY_var:Str_ARRAY]dom (Array Str_ARRAY_var)) ([Array:Setoid][newarray:dom Array][assign:nat->(dom Array)->nat->dom Array][access:(dom Array)->nat->nat]newarray)];
[assign : {z:Str_ARRAY}nat->(dom (Array z))->nat->dom (Array z)
  = Str_ARRAY_elim ([Str_ARRAY_var:Str_ARRAY]nat->(dom (Array Str_ARRAY_var))->nat->dom (Array Str_ARRAY_var)) ([Array:Setoid][newarray:dom Array][assign:nat->(dom Array)->nat->dom Array][access:(dom Array)->nat->nat]assign)];
[access : {z:Str_ARRAY}(dom (Array z))->nat->nat
  = Str_ARRAY_elim ([Str_ARRAY_var:Str_ARRAY](dom (Array Str_ARRAY_var))->nat->nat) ([Array:Setoid][newarray:dom Array][assign:nat->(dom Array)->nat->dom Array][access:(dom Array)->nat->nat]access)];
[EqARRAY : {A:Str_ARRAY}Prop
  = [A:Str_ARRAY]Equivalence%%(dom (Array A)) (Setoid_eq|(Array A))];
[AxARRAY1 : {A:Str_ARRAY}Prop
  = [A:Str_ARRAY]{i:nat}Eq%%nat (access A (newarray A) i) zero];
[AxARRAY2 : {A:Str_ARRAY}Prop
  = [A:Str_ARRAY]{n,i,j:nat}{arr:dom (Array A)}((Eq%%nat i j)->Eq%%nat (access A (assign A n arr i) j) n /\ (not (Eq%%nat i j))->Eq%%nat (access A (assign A n arr i) j) (access A arr j))];
[Ax_ARRAY : {A:Str_ARRAY}Prop
  = [A:Str_ARRAY]and3 (EqARRAY A) (AxARRAY1 A) (AxARRAY2 A)];
[ARRAY : SPEC
  = make_SPEC Str_ARRAY Ax_ARRAY];

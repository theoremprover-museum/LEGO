Module lib_adt_list_stack Import "lib_list_basics" "lib_adt_stack_cong";
[listStack : Str_STACK
  = make_Str_STACK (make_Setoid (list nat) (Eq|(list nat))) (nil nat) (cons|nat) (tail|nat) (hd%%nat zero)];
[eqStackL : EqSTACK listStack
  = pair3%%(refl%%(dom (Stack listStack)) (eq|(Stack listStack)))%%(sym%%(dom (Stack listStack)) (eq|(Stack listStack)))%%(trans%%(dom (Stack listStack)) (eq|(Stack listStack))) (Eq_refl%%(dom (Stack listStack))) (Eq_sym%%(dom (Stack listStack))) (Eq_trans%%(dom (Stack listStack)))];
[axStack1L : AxSTACK1 listStack
  = Eq_refl%%(list nat) (pop listStack (empty listStack))];
[axStack2L : AxSTACK2 listStack
  = Eq_refl%%nat (top listStack (empty listStack))];
[axStack3L : AxSTACK3 listStack
  = [n:nat][s:dom (Stack listStack)]Eq_refl%%(list nat) (pop listStack (push listStack n s))];
[axStack4L : AxSTACK4 listStack
  = [n:nat][s:dom (Stack listStack)]Eq_refl%%nat (top listStack (push listStack n s))];
[listStack_correct : Ax_STACK listStack
  = pair5%%(EqSTACK listStack)%%(AxSTACK1 listStack)%%(AxSTACK2 listStack)%%(AxSTACK3 listStack)%%(AxSTACK4 listStack) eqStackL axStack1L axStack2L axStack3L axStack4L];
[respStackL : RespSTACK listStack
  = pair3%%(RespSTACKpush listStack)%%(RespSTACKpop listStack)%%(RespSTACKtop listStack) ([n,m:nat][s,s':dom (Stack listStack)][H:Eq%%nat n m][H1:eq%%(Stack listStack) s s']Eq_subst%%nat%%m%%n (Eq_sym%%nat%%n%%m H) ([z:nat]eq%%(Stack listStack) (push listStack z s) (push listStack m s')) (Eq_subst%%(list nat)%%s'%%s (Eq_sym%%(list nat)%%s%%s' H1) ([z:list nat]eq%%(Stack listStack) (push listStack m z) (push listStack m s')) (Eq_refl%%(list nat) (push listStack m s')))) ([s,s':dom (Stack listStack)][H:eq%%(Stack listStack) s s']Eq_subst%%(list nat)%%s'%%s (Eq_sym%%(list nat)%%s%%s' H) ([z:list nat]eq%%(Stack listStack) (pop listStack z) (pop listStack s')) (Eq_refl%%(list nat) (pop listStack s'))) ([s,s':dom (Stack listStack)][H:eq%%(Stack listStack) s s']Eq_subst%%(list nat)%%s'%%s (Eq_sym%%(list nat)%%s%%s' H) ([z:list nat]Eq%%nat (top listStack z) (top listStack s')) (Eq_refl%%nat (top listStack s')))];
[listStack_correct_cong : Ax STACK_CONG listStack
  = pair%%(Ax STACK listStack)%%(RespSTACK listStack) listStack_correct respStackL];

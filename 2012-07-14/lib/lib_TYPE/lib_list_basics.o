Module lib_list_basics Import "lib_list";
[singleton : {t|SET}t->list t
  = [t|SET][x:t]cons%%t x (nil t)];
[hd : {t|SET}t->(list t)->t
  = [t|SET][x:t][l:list t]list_iter%%t%%t x ([h,_:t]h) l];
[tail : {t|SET}(list t)->list t
  = [t|SET]list_rec%%t%%(list t) (nil t) ([_:t][l,_:list t]l)];
[fold : {s,t|SET}(t->s->t)->t->(list s)->t
  = [s,t|SET][f:t->s->t][start:t]list_iter%%s%%t start ([x:s][y:t]f y x)];
[foldright : {B,A|SET}{g:A->B->B}{l:list A}{b:B}B
  = [B,A|SET][g:A->B->B][l:list A][b:B]list_iter%%A%%B b ([a:A][b'7:B]g a b'7) l];
[foldleft : {B,A|SET}{g:A->B->B}(list A)->{b:B}B
  = [B,A|SET][g:A->B->B]list_iter%%A%%({b:B}B) ([b:B]b) ([a:A][f:B->B][b:B]f (g a b))];
[map : {s,t|SET}(s->t)->(list s)->list t
  = [s,t|SET][f:s->t]list_iter%%s%%(list t) (nil t) ([x:s]cons%%t (f x))];
[append : {t|SET}(list t)->(list t)->list t
  = [t|SET][l,l':list t]list_iter%%t%%(list t) l' (cons|t) l];
[tack : {t|SET}t->(list t)->list t
  = [t|SET][x:t][l:list t]append%%t l (cons%%t x (nil t))];
[reverse : {t|SET}(list t)->list t
  = [t|SET]list_iter%%t%%(list t) (nil t) (tack|t)];
[flatten : {t|SET}(list (list t))->list t
  = [t|SET]fold%%(list t)%%(list t) (append|t) (nil|t)];
[cons_injective : {t|SET}{k,l|list t}{x,y|t}(Eq%%(list t) (cons%%t x k) (cons%%t y l))->Eq%%(list t) (tail%%t (cons%%t x k)) (tail%%t (cons%%t y l))
  = [t|SET][k,l|list t][x,y|t][h:Eq%%(list t) (cons%%t x k) (cons%%t y l)]Eq_resp|(list t)|(list t) (tail|t)%%(cons%%t x k)%%(cons%%t y l) h];
[cons_inj : {s|SET}{a,b|s}{xs,ys|list s}(Eq%%(list s) (cons%%s a xs) (cons%%s b ys))->(Eq%%s a b /\ Eq%%(list s) xs ys)
  = [s|SET][a,b|s][xs,ys|list s][H:Eq%%(list s) (cons%%s a xs) (cons%%s b ys)]pair%%(Eq%%s a b)%%(Eq%%(list s) xs ys) (Eq_resp%%(list s)%%s (hd%%s a)%%(cons%%s a xs)%%(cons%%s b ys) H) (Eq_resp%%(list s)%%(list s) (tail|s)%%(cons%%s a xs)%%(cons%%s b ys) H)];
[l_not_cons_l : {t|SET}{l:list t}{x:t}not (Eq%%(list t) l (cons%%t x l))
  = [t|SET]list_ind%%t ([l:list t]{x:t}not (Eq%%(list t) l (cons%%t x l))) ([x:t]nil_not_cons%%t (nil t) x) ([x:t][l:list t][H:{x'4:t}not (Eq%%(list t) l (cons%%t x'4 l))][x1:t][H1:Eq%%(list t) (cons%%t x l) (cons%%t x1 (cons%%t x l))]H x (cons_injective%%t%%l%%(cons%%t x l)%%x%%x1 H1))];
[append_cons : {t|SET}{k,l:list t}{x:t}Ex2%%t%%(list t) ([y:t][j:list t]Eq%%(list t) (append%%t k (cons%%t x l)) (cons%%t y j))
  = [t|SET][k,l:list t][x:t]list_ind%%t ([k'5:list t]Ex2%%t%%(list t) ([y:t][j:list t]Eq%%(list t) (append%%t k'5 (cons%%t x l)) (cons%%t y j))) (Ex2Intro%%t%%(list t) ([y:t][j:list t]Eq%%(list t) (append%%t (nil t) (cons%%t x l)) (cons%%t y j))%%x%%l (Eq_refl%%(list t) (append%%t (nil t) (cons%%t x l)))) ([x1:t][l1:list t][H:Ex2%%t%%(list t) ([y:t][j:list t]Eq%%(list t) (append%%t l1 (cons%%t x l)) (cons%%t y j))]Ex2Intro%%t%%(list t) ([y:t][j:list t]Eq%%(list t) (append%%t (cons%%t x1 l1) (cons%%t x l)) (cons%%t y j))%%x1%%(append%%t l1 (cons%%t x l)) (Eq_refl%%(list t) (append%%t (cons%%t x1 l1) (cons%%t x l)))) k];
[nil_not_append_cons : {t|SET}{x:t}{k,l:list t}not (Eq%%(list t) (nil t) (append%%t k (cons%%t x l)))
  = [t|SET][x:t][k,l:list t]append_cons%%t k l x (not (Eq%%(list t) (nil t) (append%%t k (cons%%t x l)))) ([t1|t][s|list t][H:Eq%%(list t) (append%%t k (cons%%t x l)) (cons%%t t1 s)]Eq_subst%%(list t)%%(cons%%t t1 s)%%(append%%t k (cons%%t x l)) (Eq_sym%%(list t)%%(append%%t k (cons%%t x l))%%(cons%%t t1 s) H) ([z:list t]not (Eq%%(list t) (nil t) z)) (nil_not_cons%%t s t1))];
[append_assoc : {t|SET}{j,k,l:list t}Eq%%(list t) (append%%t j (append%%t k l)) (append%%t (append%%t j k) l)
  = [t|SET]list_ind%%t ([j:list t]{k,l:list t}Eq%%(list t) (append%%t j (append%%t k l)) (append%%t (append%%t j k) l)) ([k,l:list t]Eq_refl%%(list t) (append%%t (nil t) (append%%t k l))) ([x:t][l:list t][H:{k,l'5:list t}Eq%%(list t) (append%%t l (append%%t k l'5)) (append%%t (append%%t l k) l'5)][k,l1:list t]Eq_subst%%(list t)%%(append%%t (append%%t l k) l1)%%(append%%t l (append%%t k l1)) (Eq_sym%%(list t)%%(append%%t l (append%%t k l1))%%(append%%t (append%%t l k) l1) (H k l1)) ([z:list t]Eq%%(list t) (cons%%t x z) (cons%%t x (append%%t (append%%t l k) l1))) (Eq_refl%%(list t) (cons%%t x (append%%t (append%%t l k) l1))))];
[append_nil : {t|SET}{l:list t}Eq%%(list t) (append%%t l (nil t)) l
  = [t|SET]list_ind%%t ([l:list t]Eq%%(list t) (append%%t l (nil t)) l) (Eq_refl%%(list t) (append%%t (nil t) (nil t))) ([x:t][l:list t][H:Eq%%(list t) (append%%t l (nil t)) l]Eq_resp%%(list t)%%(list t) (cons%%t x)%%(append%%t l (nil t))%%l H)];
[append_reverse : {t|SET}{l,m:list t}Eq%%(list t) (reverse%%t (append%%t l m)) (append%%t (reverse%%t m) (reverse%%t l))
  = [t|SET][l,m:list t]list_ind%%t ([l'4:list t]Eq%%(list t) (reverse%%t (append%%t l'4 m)) (append%%t (reverse%%t m) (reverse%%t l'4))) (Eq_subst%%(list t)%%(reverse%%t m)%%(append%%t (reverse%%t m) (nil t)) (Eq_sym%%(list t)%%(append%%t (reverse%%t m) (nil t))%%(reverse%%t m) (append_nil%%t (reverse%%t m))) ([z:list t]Eq%%(list t) (reverse%%t (append%%t (nil t) m)) z) (Eq_refl%%(list t) (reverse%%t (append%%t (nil t) m)))) ([x:t][l1:list t][H:Eq%%(list t) (reverse%%t (append%%t l1 m)) (append%%t (reverse%%t m) (reverse%%t l1))]Eq_subst%%(list t)%%(append%%t (append%%t (reverse%%t m) (reverse%%t l1)) (cons%%t x (nil t)))%%(append%%t (reverse%%t m) (append%%t (reverse%%t l1) (cons%%t x (nil t)))) (Eq_sym%%(list t)%%(append%%t (reverse%%t m) (append%%t (reverse%%t l1) (cons%%t x (nil t))))%%(append%%t (append%%t (reverse%%t m) (reverse%%t l1)) (cons%%t x (nil t))) (append_assoc%%t (reverse%%t m) (reverse%%t l1) (cons%%t x (nil t)))) ([z:list t]Eq%%(list t) (tack%%t x (reverse%%t (append%%t l1 m))) z) (Eq_subst%%(list t)%%(append%%t (reverse%%t m) (reverse%%t l1))%%(reverse%%t (append%%t l1 m)) (Eq_sym%%(list t)%%(reverse%%t (append%%t l1 m))%%(append%%t (reverse%%t m) (reverse%%t l1)) H) ([z:list t]Eq%%(list t) (tack%%t x z) (append%%t (append%%t (reverse%%t m) (reverse%%t l1)) (cons%%t x (nil t)))) (Eq_refl%%(list t) (tack%%t x (append%%t (reverse%%t m) (reverse%%t l1)))))) l];
[append_strict : {t|SET}{k,l:list t}(Eq%%(list t) (append%%t k l) (nil t))->(Eq%%(list t) k (nil t) /\ Eq%%(list t) l (nil t))
  = [t|SET][k,l:list t][H:Eq%%(list t) (append%%t k l) (nil t)]list_elim%%t ([k'5|list t](Eq%%(list t) (append%%t k'5 l) (nil t))->(Eq%%(list t) k'5 (nil t) /\ Eq%%(list t) l (nil t))) ([H1:Eq%%(list t) (append%%t (nil t) l) (nil t)]pair%%(Eq%%(list t) (nil t) (nil t))%%(Eq%%(list t) l (nil t)) (Eq_refl%%(list t) (nil t)) H1) ([x1:t][x2:list t][x2_ih:(Eq%%(list t) (append%%t x2 l) (nil t))->(Eq%%(list t) x2 (nil t) /\ Eq%%(list t) l (nil t))][H1:Eq%%(list t) (append%%t (cons%%t x1 x2) l) (nil t)]nil_not_cons%%t (list_elim%%t ([_:list t]list t) l ([y:t][_:list t]cons|t y) x2) x1 (Eq_sym%%(list t)%%(append%%t (cons%%t x1 x2) l)%%(nil t) H1) (Eq%%(list t) (cons%%t x1 x2) (nil t) /\ Eq%%(list t) l (nil t))) k H];
[double_reverse_is_identity : {t|SET}{l:list t}Eq%%(list t) (reverse%%t (reverse%%t l)) l
  = [t|SET]list_ind%%t ([l:list t]Eq%%(list t) (reverse%%t (reverse%%t l)) l) (Eq_refl%%(list t) (reverse%%t (reverse%%t (nil t)))) ([x:t][l:list t][H:Eq%%(list t) (reverse%%t (reverse%%t l)) l]Eq_subst%%(list t)%%(append%%t (reverse%%t (cons%%t x (nil t))) (reverse%%t (reverse%%t l)))%%(reverse%%t (append%%t (reverse%%t l) (cons%%t x (nil t)))) (Eq_sym%%(list t)%%(reverse%%t (append%%t (reverse%%t l) (cons%%t x (nil t))))%%(append%%t (reverse%%t (cons%%t x (nil t))) (reverse%%t (reverse%%t l))) (append_reverse%%t (reverse%%t l) (cons%%t x (nil t)))) ([z:list t]Eq%%(list t) z (cons%%t x l)) (Eq_subst%%(list t)%%l%%(reverse%%t (reverse%%t l)) (Eq_sym%%(list t)%%(reverse%%t (reverse%%t l))%%l H) ([z:list t]Eq%%(list t) (append%%t (reverse%%t (cons%%t x (nil t))) z) (cons%%t x l)) (Eq_refl%%(list t) (append%%t (reverse%%t (cons%%t x (nil t))) l))))];
[foldright_append_lem : {s,t|SET}{g:s->t->t}{G,H:list s}{b:t}Eq%%t (foldright%%t%%s g (append%%s G H) b) (foldright%%t%%s g G (foldright%%t%%s g H b))
  = [s,t|SET][g:s->t->t]list_ind%%s ([G:list s]{H:list s}{b:t}Eq%%t (foldright%%t%%s g (append%%s G H) b) (foldright%%t%%s g G (foldright%%t%%s g H b))) ([H:list s][b:t]Eq_refl%%t (foldright%%t%%s g (append%%s (nil s) H) b)) ([x:s][l:list s][H:{H:list s}{b:t}Eq%%t (foldright%%t%%s g (append%%s l H) b) (foldright%%t%%s g l (foldright%%t%%s g H b))][H1:list s][b:t]Eq_subst%%t%%(foldright%%t%%s g l (foldright%%t%%s g H1 b))%%(foldright%%t%%s g (append%%s l H1) b) (Eq_sym%%t%%(foldright%%t%%s g (append%%s l H1) b)%%(foldright%%t%%s g l (foldright%%t%%s g H1 b)) (H H1 b)) ([z:t]Eq%%t (g x z) (g x (foldright%%t%%s g l (foldright%%t%%s g H1 b)))) (Eq_refl%%t (g x (foldright%%t%%s g l (foldright%%t%%s g H1 b)))))];
[foldleft_append_lem : {s,t|SET}{g:s->t->t}{G,H:list s}{b:t}Eq%%t (foldleft%%t%%s g (append%%s G H) b) (foldleft%%t%%s g H (foldleft%%t%%s g G b))
  = [s,t|SET][g:s->t->t]list_ind%%s ([G:list s]{H:list s}{b:t}Eq%%t (foldleft%%t%%s g (append%%s G H) b) (foldleft%%t%%s g H (foldleft%%t%%s g G b))) ([H:list s][b:t]Eq_refl%%t (foldleft%%t%%s g (append%%s (nil s) H) b)) ([x:s][l:list s][H:{H:list s}{b:t}Eq%%t (foldleft%%t%%s g (append%%s l H) b) (foldleft%%t%%s g H (foldleft%%t%%s g l b))][H1:list s][b:t]Eq_subst%%t%%(foldleft%%t%%s g H1 (foldleft%%t%%s g l (g x b)))%%(foldleft%%t%%s g (append%%s l H1) (g x b)) (Eq_sym%%t%%(foldleft%%t%%s g (append%%s l H1) (g x b))%%(foldleft%%t%%s g H1 (foldleft%%t%%s g l (g x b))) (H H1 (g x b))) ([z:t]Eq%%t z (foldleft%%t%%s g H1 (foldleft%%t%%s g l (g x b)))) (Eq_refl%%t (foldleft%%t%%s g H1 (foldleft%%t%%s g l (g x b)))))];

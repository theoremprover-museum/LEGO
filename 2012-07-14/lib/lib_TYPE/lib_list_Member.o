Module lib_list_Member Import "lib_list_Adjoin" "lib_list_prod";
[Member : {s|SET}{a:s}{xs:list s}Prop
  = [s|SET][a:s][xs:list s]Ex%%(list s) ([ys:list s]Adjoin%%s a ys xs)];
[not_Member_nil : {s|SET}{a|s}not (Member%%s a (nil s))
  = [s|SET][a|s][H:Member%%s a (nil s)]H absurd ([t:list s][H1:Adjoin%%s a t (nil s)]Adjoin_inv_corr4%%s%%a%%t H1)];
[Mem_ind : {s|SET}{l|list s}{a,b|s}iff (Member%%s b (cons%%s a l)) (Member%%s b l \/ Eq%%s a b)
  = [s|SET][l|list s][a,b|s]pair%%((Member%%s b (cons%%s a l))->(Member%%s b l \/ Eq%%s a b))%%((Member%%s b l \/ Eq%%s a b)->Member%%s b (cons%%s a l)) ([H:Member%%s b (cons%%s a l)]H (Member%%s b l \/ Eq%%s a b) ([t:list s][H1:Adjoin%%s b t (cons%%s a l)]Adjoin_inv_corr2%%s%%b%%a%%t%%l H1%%(Member%%s b l \/ Eq%%s a b) ([H2:Eq%%s b a /\ Eq%%(list s) t l]inr%%(Member%%s b l)%%(Eq|s a b) (Eq_sym%%s%%b%%a (fst%%(Eq%%s b a)%%(Eq%%(list s) t l) H2))) ([H2:Ex%%(list s) ([xs':list s](Eq%%(list s) t (cons%%s a xs') /\ Adjoin%%s b xs' l))]inl%%(Member%%s b l)%%(Eq%%s a b) (H2 (Member%%s b l) ([t1:list s][H3:Eq%%(list s) t (cons%%s a t1) /\ Adjoin%%s b t1 l]ExIntro%%(list s) t1 ([ys:list s]Adjoin%%s b ys l) (snd%%(Eq%%(list s) t (cons%%s a t1))%%(Adjoin%%s b t1 l) H3)))))) ([H:Member%%s b l \/ Eq%%s a b]H%%(Member%%s b (cons%%s a l)) ([H1:Member%%s b l]H1 (Member%%s b (cons%%s a l)) ([t:list s][H2:Adjoin%%s b t l]ExIntro%%(list s) (cons%%s a t) ([ys:list s]Adjoin%%s b ys (cons%%s a l)) (ad2%%s%%t%%b%%l H2 a))) ([H1:Eq%%s a b]Eq_subst%%s%%b%%a (Eq_sym%%s%%a%%b H1) ([z:s]Member%%s b (cons%%s z l)) (ExIntro%%(list s) l ([ys:list s]Adjoin%%s b ys (cons%%s b l)) (ad1%%s b l))))];
[Member_Adjoin : {s|SET}{l,al|list s}{a,b|s}(not (Eq%%s a b))->(Adjoin%%s a l al)->(Member%%s b al)->Member%%s b l
  = [s|SET][l,al|list s][a,b|s][H:not (Eq%%s a b)][H1:Adjoin%%s a l al][H2:Member%%s b al]H2 (Member%%s b l) ([t:list s][H3:Adjoin%%s b t al]Adjoin_com3%%s%%a%%b%%l%%t%%al H1 H3%%(Member%%s b l) ([H4:Eq%%(list s) t l /\ Eq%%s b a]H (Eq_sym%%s%%b%%a (snd%%(Eq%%(list s) t l)%%(Eq%%s b a) H4)) (Member%%s b l)) ([H4:Ex%%(list s) ([zs:list s](Adjoin%%s b zs l /\ Adjoin%%s a zs t))]H4 (Member%%s b l) ([t1:list s][H5:Adjoin%%s b t1 l /\ Adjoin%%s a t1 t]ExIntro%%(list s) t1 ([ys:list s]Adjoin%%s b ys l) (fst%%(Adjoin%%s b t1 l)%%(Adjoin%%s a t1 t) H5))))];
[Member_map : {s,u|SET}{l:list s}{a:s}{f:s->u}(Member%%s a l)->Member%%u (f a) (map%%s%%u f l)
  = [s,u|SET]list_ind%%s ([l:list s]{a:s}{f:s->u}(Member%%s a l)->Member%%u (f a) (map%%s%%u f l)) ([a:s][f:s->u][H:Member%%s a (nil s)]not_Member_nil%%s%%a H (Member%%u (f a) (map%%s%%u f (nil s)))) ([x:s][l:list s][H:{a:s}{f:s->u}(Member%%s a l)->Member%%u (f a) (map%%s%%u f l)][a:s][f:s->u][H1:Member%%s a (cons%%s x l)]snd%%((Member%%u (f a) (cons%%u (f x) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'11:s]cons%%u (f x'11)) y) l)))->(Member%%u (f a) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'12:s]cons%%u (f x'12)) y) l) \/ Eq%%u (f x) (f a)))%%((Member%%u (f a) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'11:s]cons%%u (f x'11)) y) l) \/ Eq%%u (f x) (f a))->Member%%u (f a) (cons%%u (f x) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'12:s]cons%%u (f x'12)) y) l))) (Mem_ind|u|(list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'11:s]cons%%u (f x'11)) y) l)|(f x)|(f a)) (fst%%((Member%%s a (cons%%s x l))->(Member%%s a l \/ Eq%%s x a))%%((Member%%s a l \/ Eq%%s x a)->Member%%s a (cons%%s x l)) (Mem_ind|s|l|x|a) H1%%(Member%%u (f a) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]cons%%u (f y)) l) \/ Eq%%u (f x) (f a)) ([H2:Member%%s a l]inl%%(Member%%u (f a) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]cons%%u (f y)) l))%%(Eq%%u (f x) (f a)) (H a f H2)) ([H2:Eq%%s x a]inr%%(Member%%u (f a) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]cons%%u (f y)) l))%%(Eq%%u (f x) (f a)) (Eq_resp%%s%%u f%%x%%a H2))))];
[Member_map_inv : {s,u|SET}{l:list s}{b:u}{f:s->u}(Member%%u b (map%%s%%u f l))->Ex%%s ([a:s](Member%%s a l /\ Eq%%u (f a) b))
  = [s,u|SET]list_ind%%s ([l:list s]{b:u}{f:s->u}(Member%%u b (map%%s%%u f l))->Ex%%s ([a:s](Member%%s a l /\ Eq%%u (f a) b))) ([b:u][f:s->u][H:Member%%u b (map%%s%%u f (nil s))]not_Member_nil%%u%%b H (Ex%%s ([a:s](Member%%s a (nil s) /\ Eq%%u (f a) b)))) ([x:s][l:list s][H:{b:u}{f:s->u}(Member%%u b (map%%s%%u f l))->Ex%%s ([a:s](Member%%s a l /\ Eq%%u (f a) b))][b:u][f:s->u][H1:Member%%u b (map%%s%%u f (cons%%s x l))]fst%%((Member%%u b (cons%%u (f x) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'11:s]cons%%u (f x'11)) y) l)))->(Member%%u b (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'12:s]cons%%u (f x'12)) y) l) \/ Eq%%u (f x) b))%%((Member%%u b (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'11:s]cons%%u (f x'11)) y) l) \/ Eq%%u (f x) b)->Member%%u b (cons%%u (f x) (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'12:s]cons%%u (f x'12)) y) l))) (Mem_ind|u|(list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]([x'11:s]cons%%u (f x'11)) y) l)|(f x)|b) H1%%(Ex%%s ([a:s](Member%%s a (cons%%s x l) /\ Eq%%u (f a) b))) ([H2:Member%%u b (list_elim%%s ([_:list s]list u) (nil u) ([y:s][_:list s]cons%%u (f y)) l)]H b f H2 (Ex%%s ([a:s](Member%%s a (cons%%s x l) /\ Eq%%u (f a) b))) ([t:s][H3:Member%%s t l /\ Eq%%u (f t) b]ExIntro%%s t ([a:s](Member%%s a (cons%%s x l) /\ Eq%%u (f a) b)) (pair%%(Member%%s t (cons%%s x l))%%(Eq%%u (f t) b) (snd%%((Member%%s t (cons%%s x l))->(Member%%s t l \/ Eq%%s x t))%%((Member%%s t l \/ Eq%%s x t)->Member%%s t (cons%%s x l)) (Mem_ind|s|l|x|t) (inl%%(Member%%s t l)%%(Eq%%s x t) (fst%%(Member%%s t l)%%(Eq%%u (f t) b) H3))) (snd%%(Member%%s t l)%%(Eq%%u (f t) b) H3)))) ([H2:Eq%%u (f x) b]ExIntro%%s x ([a:s](Member%%s a (cons%%s x l) /\ Eq%%u (f a) b)) (pair%%(Member%%s x (cons%%s x l))%%(Eq%%u (f x) b) (snd%%((Member%%s x (cons%%s x l))->(Member%%s x l \/ Eq%%s x x))%%((Member%%s x l \/ Eq%%s x x)->Member%%s x (cons%%s x l)) (Mem_ind|s|l|x|x) (inr%%(Member%%s x l)%%(Eq|s x x) (Eq_refl%%s x))) H2)))];
[Member_append : {s|SET}{l1,l2:list s}{a:s}iff (Member%%s a (append%%s l1 l2)) (Member%%s a l1 \/ Member%%s a l2)
  = [s|SET][l1,l2:list s][a:s]list_ind%%s ([l1'5:list s]iff (Member%%s a (append%%s l1'5 l2)) (Member%%s a l1'5 \/ Member%%s a l2)) (pair%%((Member%%s a (append%%s (nil s) l2))->(Member%%s a (nil s) \/ Member%%s a l2))%%((Member%%s a (nil s) \/ Member%%s a l2)->Member%%s a (append%%s (nil s) l2)) (inr%%(Member%%s a (nil s))%%(Member%%s a (append%%s (nil s) l2))) ([H:Member%%s a (nil s) \/ Member%%s a l2]H%%(Member%%s a (append%%s (nil s) l2)) ([H1:Member%%s a (nil s)]not_Member_nil%%s%%a H1 (Member%%s a (append%%s (nil s) l2))) (PropId%%(Member%%s a l2)))) ([x:s][l:list s][H:iff (Member%%s a (append%%s l l2)) (Member%%s a l \/ Member%%s a l2)]pair%%((Member%%s a (append%%s (cons%%s x l) l2))->(Member%%s a (cons%%s x l) \/ Member%%s a l2))%%((Member%%s a (cons%%s x l) \/ Member%%s a l2)->Member%%s a (append%%s (cons%%s x l) l2)) ([H1:Member%%s a (append%%s (cons%%s x l) l2)]fst%%((Member%%s a (cons%%s x (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l)))->(Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l) \/ Eq%%s x a))%%((Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l) \/ Eq%%s x a)->Member%%s a (cons%%s x (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l))) (Mem_ind|s|(list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l)|x|a) H1%%(Member%%s a (cons%%s x l) \/ Member%%s a l2) ([H2:Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l)]fst%%((Member%%s a (append%%s l l2))->(Member%%s a l \/ Member%%s a l2))%%((Member%%s a l \/ Member%%s a l2)->Member%%s a (append%%s l l2)) H H2%%(Member%%s a (cons%%s x l) \/ Member%%s a l2) ([H3:Member%%s a l]inl%%(Member%%s a (cons%%s x l))%%(Member%%s a l2) (snd%%((Member%%s a (cons%%s x l))->(Member%%s a l \/ Eq%%s x a))%%((Member%%s a l \/ Eq%%s x a)->Member%%s a (cons%%s x l)) (Mem_ind|s|l|x|a) (inl%%(Member%%s a l)%%(Eq%%s x a) H3))) (inr%%(Member%%s a (cons%%s x l))%%(Member%%s a l2))) ([H2:Eq%%s x a]inl%%(Member%%s a (cons%%s x l))%%(Member%%s a l2) (snd%%((Member%%s a (cons%%s x l))->(Member%%s a l \/ Eq%%s x a))%%((Member%%s a l \/ Eq%%s x a)->Member%%s a (cons%%s x l)) (Mem_ind|s|l|x|a) (inr%%(Member%%s a l)%%(Eq%%s x a) H2)))) ([H1:Member%%s a (cons%%s x l) \/ Member%%s a l2]snd%%((Member%%s a (cons%%s x (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l)))->(Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l) \/ Eq%%s x a))%%((Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l) \/ Eq%%s x a)->Member%%s a (cons%%s x (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l))) (Mem_ind|s|(list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l)|x|a) (H1%%(Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l) \/ Eq%%s x a) ([H2:Member%%s a (cons%%s x l)]fst%%((Member%%s a (cons%%s x l))->(Member%%s a l \/ Eq%%s x a))%%((Member%%s a l \/ Eq%%s x a)->Member%%s a (cons%%s x l)) (Mem_ind|s|l|x|a) H2%%(Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l) \/ Eq%%s x a) ([H3:Member%%s a l]inl%%(Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l))%%(Eq%%s x a) (snd%%((Member%%s a (append%%s l l2))->(Member%%s a l \/ Member%%s a l2))%%((Member%%s a l \/ Member%%s a l2)->Member%%s a (append%%s l l2)) H (inl%%(Member%%s a l)%%(Member%%s a l2) H3))) (inr%%(Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l))%%(Eq%%s x a))) ([H2:Member%%s a l2]inl%%(Member%%s a (list_elim%%s ([_:list s]list s) l2 ([y:s][_:list s]cons|s y) l))%%(Eq%%s x a) (snd%%((Member%%s a (append%%s l l2))->(Member%%s a l \/ Member%%s a l2))%%((Member%%s a l \/ Member%%s a l2)->Member%%s a (append%%s l l2)) H (inr%%(Member%%s a l)%%(Member%%s a l2) H2)))))) l1];
[Member_prod : {s,u|SET}{l1:list s}{l2:list u}{p:prod s u}iff (Member%%(prod s u) p (prod_list%%s%%u l1 l2)) (Member%%s (Fst%%s%%u p) l1 /\ Member%%u (Snd%%s%%u p) l2)
  = [s,u|SET][l1:list s][l2:list u][p:prod s u]list_ind%%s ([l1'6:list s]iff (Member%%(prod s u) p (prod_list%%s%%u l1'6 l2)) (Member%%s (Fst%%s%%u p) l1'6 /\ Member%%u (Snd%%s%%u p) l2)) (pair%%((Member%%(prod s u) p (prod_list%%s%%u (nil s) l2))->(Member%%s (Fst%%s%%u p) (nil s) /\ Member%%u (Snd%%s%%u p) l2))%%((Member%%s (Fst%%s%%u p) (nil s) /\ Member%%u (Snd%%s%%u p) l2)->Member%%(prod s u) p (prod_list%%s%%u (nil s) l2)) ([H:Member%%(prod s u) p (prod_list%%s%%u (nil s) l2)]not_Member_nil%%(prod s u)%%p H (Member%%s (Fst%%s%%u p) (nil s) /\ Member%%u (Snd%%s%%u p) l2)) ([H:Member%%s (Fst%%s%%u p) (nil s) /\ Member%%u (Snd%%s%%u p) l2]not_Member_nil%%s%%(Fst%%s%%u p) (fst%%(Member%%s (Fst%%s%%u p) (nil s))%%(Member%%u (Snd%%s%%u p) l2) H) (Member%%(prod s u) p (prod_list%%s%%u (nil s) l2)))) ([x:s][l:list s][H:iff (Member%%(prod s u) p (prod_list%%s%%u l l2)) (Member%%s (Fst%%s%%u p) l /\ Member%%u (Snd%%s%%u p) l2)]pair%%((Member%%(prod s u) p (prod_list%%s%%u (cons%%s x l) l2))->(Member%%s (Fst%%s%%u p) (cons%%s x l) /\ Member%%u (Snd%%s%%u p) l2))%%((Member%%s (Fst%%s%%u p) (cons%%s x l) /\ Member%%u (Snd%%s%%u p) l2)->Member%%(prod s u) p (prod_list%%s%%u (cons%%s x l) l2)) ([H1:Member%%(prod s u) p (prod_list%%s%%u (cons%%s x l) l2)]fst%%((Member%%(prod s u) p (append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u x) l2) (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l)))->(Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2) \/ Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l)))%%((Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2) \/ Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l))->Member%%(prod s u) p (append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u x) l2) (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l))) (Member_append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u x) l2) (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l) p) H1%%(Member%%s (Fst%%s%%u p) (cons%%s x l) /\ Member%%u (Snd%%s%%u p) l2) ([H2:Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2)]Member_map_inv%%u%%(prod s u) l2 p (Pair%%s%%u x) H2 (Member%%s (Fst%%s%%u p) (cons%%s x l) /\ Member%%u (Snd%%s%%u p) l2) ([t:u][H3:Member%%u t l2 /\ Eq%%(prod s u) (Pair%%s%%u x t) p]pair%%(Member%%s (Fst%%s%%u p) (cons%%s x l))%%(Member%%u (Snd%%s%%u p) l2) (snd%%((Member%%s (Fst%%s%%u p) (cons%%s x l))->(Member%%s (Fst%%s%%u p) l \/ Eq%%s x (Fst%%s%%u p)))%%((Member%%s (Fst%%s%%u p) l \/ Eq%%s x (Fst%%s%%u p))->Member%%s (Fst%%s%%u p) (cons%%s x l)) (Mem_ind|s|l|x|(Fst%%s%%u p)) (inr%%(Member%%s (Fst%%s%%u p) l)%%(Eq%%s x (Fst%%s%%u p)) (Eq_resp%%(prod s u)%%s (Fst|s|u)%%(Pair%%s%%u x t)%%p (snd%%(Member%%u t l2)%%(Eq%%(prod s u) (Pair%%s%%u x t) p) H3)))) (Eq_subst%%u%%(Snd|s|u (Pair%%s%%u x t))%%(Snd|s|u p) (Eq_sym%%u%%(Snd|s|u p)%%(Snd|s|u (Pair%%s%%u x t)) (Eq_sym%%u%%(Snd|s|u (Pair%%s%%u x t))%%(Snd|s|u p) (Eq_resp%%(prod s u)%%u (Snd|s|u)%%(Pair%%s%%u x t)%%p (snd%%(Member%%u t l2)%%(Eq%%(prod s u) (Pair%%s%%u x t) p) H3)))) ([z:u]Member%%u z l2) (fst%%(Member%%u t l2)%%(Eq%%(prod s u) (Pair%%s%%u x t) p) H3)))) ([H2:Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u y) l2)) l)]fst%%((Member%%(prod s u) p (prod_list%%s%%u l l2))->(Member%%s (Fst%%s%%u p) l /\ Member%%u (Snd%%s%%u p) l2))%%((Member%%s (Fst%%s%%u p) l /\ Member%%u (Snd%%s%%u p) l2)->Member%%(prod s u) p (prod_list%%s%%u l l2)) H H2%%(Member%%s (Fst%%s%%u p) (cons%%s x l) /\ Member%%u (Snd%%s%%u p) l2) ([H3:Member%%s (Fst%%s%%u p) l][H4:Member%%u (Snd%%s%%u p) l2]pair%%(Member%%s (Fst%%s%%u p) (cons%%s x l))%%(Member%%u (Snd%%s%%u p) l2) (snd%%((Member%%s (Fst%%s%%u p) (cons%%s x l))->(Member%%s (Fst%%s%%u p) l \/ Eq%%s x (Fst%%s%%u p)))%%((Member%%s (Fst%%s%%u p) l \/ Eq%%s x (Fst%%s%%u p))->Member%%s (Fst%%s%%u p) (cons%%s x l)) (Mem_ind|s|l|x|(Fst%%s%%u p)) (inl%%(Member%%s (Fst%%s%%u p) l)%%(Eq%%s x (Fst%%s%%u p)) H3)) H4))) ([H1:Member%%s (Fst%%s%%u p) (cons%%s x l) /\ Member%%u (Snd%%s%%u p) l2]snd%%((Member%%(prod s u) p (append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u x) l2) (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l)))->(Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2) \/ Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l)))%%((Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2) \/ Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l))->Member%%(prod s u) p (append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u x) l2) (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l))) (Member_append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u x) l2) (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]([a:s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u a) l2)) y) l) p) (fst%%((Member%%s (Fst%%s%%u p) (cons%%s x l))->(Member%%s (Fst%%s%%u p) l \/ Eq%%s x (Fst%%s%%u p)))%%((Member%%s (Fst%%s%%u p) l \/ Eq%%s x (Fst%%s%%u p))->Member%%s (Fst%%s%%u p) (cons%%s x l)) (Mem_ind|s|l|x|(Fst%%s%%u p)) (fst%%(Member%%s (Fst%%s%%u p) (cons%%s x l))%%(Member%%u (Snd%%s%%u p) l2) H1)%%(Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2) \/ Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u y) l2)) l)) ([H2:Member%%s (Fst%%s%%u p) l]inr%%(Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2))%%(Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u y) l2)) l)) (snd%%((Member%%(prod s u) p (prod_list%%s%%u l l2))->(Member%%s (Fst%%s%%u p) l /\ Member%%u (Snd%%s%%u p) l2))%%((Member%%s (Fst%%s%%u p) l /\ Member%%u (Snd%%s%%u p) l2)->Member%%(prod s u) p (prod_list%%s%%u l l2)) H (pair%%(Member%%s (Fst%%s%%u p) l)%%(Member%%u (Snd%%s%%u p) l2) H2 (snd%%(Member%%s (Fst%%s%%u p) (cons%%s x l))%%(Member%%u (Snd%%s%%u p) l2) H1)))) ([H2:Eq%%s x (Fst%%s%%u p)]inl%%(Member%%(prod s u) p (map%%u%%(prod s u) (Pair%%s%%u x) l2))%%(Member%%(prod s u) p (list_elim%%s ([_:list s]list (prod s u)) (nil (prod s u)) ([y:s][_:list s]append%%(prod s u) (map%%u%%(prod s u) (Pair%%s%%u y) l2)) l)) (Eq_subst%%(prod s u)%%(Pair%%s%%u (Fst%%s%%u p) (Snd%%s%%u p))%%p (Eq_sym%%(prod s u)%%p%%(Pair%%s%%u (Fst%%s%%u p) (Snd%%s%%u p)) (prod_eta%%s%%u p)) ([z:prod s u]Member%%(prod s u) z (map%%u%%(prod s u) (Pair%%s%%u x) l2)) (Eq_subst%%s%%(Fst%%s%%u p)%%x (Eq_sym%%s%%x%%(Fst%%s%%u p) H2) ([z:s]Member%%(prod s u) (Pair%%s%%u (Fst%%s%%u p) (Snd%%s%%u p)) (map%%u%%(prod s u) (Pair%%s%%u z) l2)) (Member_map%%u%%(prod s u) l2 (Snd%%s%%u p) (Pair%%s%%u (Fst%%s%%u p)) (snd%%(Member%%s (Fst%%s%%u p) (cons%%s x l))%%(Member%%u (Snd%%s%%u p) l2) H1)))))))) l1];
[Member_build : {s|SET}{f:nat->s}{n:nat}{a:s}iff (Member%%s a (build_list%%s f n)) (Ex%%nat ([k:nat](Lt k n /\ Eq%%s (f k) a)))
  = [s|SET][ll_logic=[A,B,C,D,E|Prop][H:iff B C][H1:iff D (B \/ A)][H2:iff E (C \/ A)]pair%%(D->E)%%(E->D) ([H3:D]snd%%(E->(C \/ A))%%((C \/ A)->E) H2 (fst%%(D->(B \/ A))%%((B \/ A)->D) H1 H3%%(C \/ A) ([H4:B]inl%%C%%A (fst%%(B->C)%%(C->B) H H4)) (inr%%C%%A))) ([H3:E]snd%%(D->(B \/ A))%%((B \/ A)->D) H1 (fst%%(E->(C \/ A))%%((C \/ A)->E) H2 H3%%(B \/ A) ([H4:C]inl%%B%%A (snd%%(B->C)%%(C->B) H H4)) (inr%%B%%A)))][f:nat->s][n:nat][a:s]nat_ind ([n'6:nat]iff (Member%%s a (build_list%%s f n'6)) (Ex%%nat ([k:nat](Lt k n'6 /\ Eq%%s (f k) a)))) (pair%%((Member%%s a (build_list%%s f zero))->Ex%%nat ([k:nat](Lt k zero /\ Eq%%s (f k) a)))%%((Ex%%nat ([k:nat](Lt k zero /\ Eq%%s (f k) a)))->Member%%s a (build_list%%s f zero)) ([H:Member%%s a (build_list%%s f zero)]not_Member_nil%%s%%a H (Ex%%nat ([k:nat](Lt k zero /\ Eq%%s (f k) a)))) ([H:Ex%%nat ([k:nat](Lt k zero /\ Eq%%s (f k) a))]H (Member%%s a (build_list%%s f zero)) ([t:nat][H1:Lt t zero /\ Eq%%s (f t) a]not_n_Lt_zero t (fst%%(Lt t zero)%%(Eq%%s (f t) a) H1) (Member%%s a (build_list%%s f zero))))) ([n1:nat][H:iff (Member%%s a (build_list%%s f n1)) (Ex%%nat ([k:nat](Lt k n1 /\ Eq%%s (f k) a)))]ll_logic%%(Eq%%s (f n1) a)%%(Member%%s a (build_list%%s f n1))%%(Ex%%nat ([k:nat](Lt k n1 /\ Eq%%s (f k) a)))%%(Member%%s a (cons%%s (f n1) (build_list%%s f n1)))%%(Ex%%nat ([t:nat](Lt t (suc n1) /\ ([x:nat]Eq%%s (f x) a) t))) H (Mem_ind|s|(build_list%%s f n1)|(f n1)|a) (exists_suc ([x:nat]Eq%%s (f x) a) n1)) n];

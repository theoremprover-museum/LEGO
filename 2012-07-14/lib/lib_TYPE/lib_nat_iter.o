Module lib_nat_iter Import "lib_nat" "lib_bool_funs";
[nat_iter_suc : {t|SET}{z:t}{s:t->t}{n:nat}Eq%%t (nat_iter%%t z s (suc n)) (nat_iter%%t (s z) s n)
  = [t|SET][z:t][s:t->t][n:nat]nat_ind ([n'5:nat]Eq%%t (nat_iter%%t z s (suc n'5)) (nat_iter%%t (s z) s n'5)) (Eq_refl%%t (nat_iter%%t z s (suc zero))) ([n1:nat]Eq_resp%%t%%t s%%(nat_iter%%t z s (suc n1))%%(nat_iter%%t (s z) s n1)) n];
[while_cond1 : {f:nat->bool}[lll=nat_iter%%nat zero ([a:nat]if%%nat (f (suc a)) (suc a) a)](is_true (f zero))->{n:nat}is_true (f (lll n))
  = [f:nat->bool][lll=nat_iter%%nat zero ([a:nat]if%%nat (f (suc a)) (suc a) a)][fzero:is_true (f zero)]nat_ind ([n:nat]is_true (f (lll n))) fzero ([n:nat][ih:is_true (f (lll n))]true_or_false (f (suc (lll n)))%%(is_true (f (if%%nat (f (suc (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n))) (suc (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)) (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)))) ([Qtt:is_true (f (suc (lll n)))]Eq_subst%%bool%%true%%(f (suc (lll n))) (Eq_sym%%bool%%(f (suc (lll n)))%%true Qtt) ([z:bool]is_true (f (if%%nat z (suc (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)) (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)))) Qtt) ([Qff:is_false (f (suc (lll n)))]Eq_subst%%bool%%false%%(f (suc (lll n))) (Eq_sym%%bool%%(f (suc (lll n)))%%false Qff) ([z:bool]is_true (f (if%%nat z (suc (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)) (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)))) ih))];
[while_cond2 : {f:nat->bool}[lll=nat_iter%%nat zero ([a:nat]if%%nat (f (suc a)) (suc a) a)]{n:nat}(Eq%%nat (lll n) n \/ is_false (f (suc (lll n))))
  = [f:nat->bool][lll=nat_iter%%nat zero ([a:nat]if%%nat (f (suc a)) (suc a) a)]nat_ind ([n:nat](Eq%%nat (lll n) n \/ is_false (f (suc (lll n))))) (inl%%(Eq|nat (lll zero) (lll zero))%%(is_false (f (suc (lll zero)))) (Eq_refl%%nat (lll zero))) ([n:nat][ih:Eq%%nat (lll n) n \/ is_false (f (suc (lll n)))]ih%%(Eq%%nat (lll (suc n)) (suc n) \/ is_false (f (suc (lll (suc n))))) ([lnQn:Eq%%nat (lll n) n]true_or_false (f (suc (lll n)))%%(Eq%%nat (lll (suc n)) (suc n) \/ is_false (f (suc (lll (suc n))))) ([Qtt:is_true (f (suc (lll n)))]inl%%(Eq%%nat (lll (suc n)) (suc n))%%(is_false (f (suc (lll (suc n))))) (Eq_subst%%bool%%true%%(f (suc (lll n))) (Eq_sym%%bool%%(f (suc (lll n)))%%true Qtt) ([z:bool]Eq%%nat (if%%nat z (suc (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)) (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)) (suc n)) (Eq_resp%%nat%%nat suc%%(lll n)%%n lnQn))) ([Qff:is_false (f (suc (lll n)))]inr%%(Eq%%nat (lll (suc n)) (suc n))%%(is_false (f (suc (lll (suc n))))) (Eq_subst%%bool%%false%%(f (suc (lll n))) (Eq_sym%%bool%%(f (suc (lll n)))%%false Qff) ([z:bool]is_false (f (suc (if%%nat z (suc (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)) (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n))))) Qff))) ([Qff:is_false (f (suc (lll n)))]inr%%(Eq%%nat (lll (suc n)) (suc n))%%(is_false (f (suc (lll (suc n))))) (Eq_subst%%bool%%false%%(f (suc (lll n))) (Eq_sym%%bool%%(f (suc (lll n)))%%false Qff) ([z:bool]is_false (f (suc (if%%nat z (suc (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n)) (nat_elim ([_:nat]nat) zero ([_,a:nat]if%%nat (f (suc a)) (suc a) a) n))))) Qff)))];

Module lib_list_partial Import "lib_list_bool" "lib_unit" "lib_sum";
[head : {t|SET}(list t)->sum unit t
  = [t|SET]list_iter%%t%%(sum unit t) (in1|unit|t void) ([x:t][_:sum unit t]in2|unit|t x)];
[last : {s|SET}(list s)->sum unit s
  = [s|SET]list_rec%%s%%(sum unit s) (in1|unit|s void) ([x:s][l:list s][prev:sum unit s]if%%(sum unit s) (nil_test%%s l) (in2%%unit%%s x) prev)];
[prune : {s|SET}(list s)->sum unit (list s)
  = [s|SET]list_rec%%s%%(sum unit (list s)) (in1|unit|(list s) void) ([x:s][l:list s][prune_l:sum unit (list s)]if%%(sum unit (list s)) (nil_test%%s l) (in2%%unit%%(list s) (nil s)) (case%%unit%%(list s)%%(sum unit (list s)) ([_:unit]in1%%unit%%(list s) void) ([l'5:list s]in2%%unit%%(list s) (cons%%s x l'5)) prune_l))];
[last_resp_cons : {t|SET}{l:list t}{a,b:t}Eq%%(sum unit t) (last%%t (cons%%t a l)) (last%%t (cons%%t b (cons%%t a l)))
  = [t|SET]list_ind%%t ([l:list t]{a,b:t}Eq%%(sum unit t) (last%%t (cons%%t a l)) (last%%t (cons%%t b (cons%%t a l)))) ([a,b:t]Eq_refl%%(sum unit t) (last%%t (cons%%t a (nil t)))) ([x:t][l:list t][H:{a,b:t}Eq%%(sum unit t) (last%%t (cons%%t a l)) (last%%t (cons%%t b (cons%%t a l)))][a,b:t]Eq_subst%%(sum unit t)%%(last%%t (cons%%t x l))%%(last%%t (cons%%t a (cons%%t x l))) (Eq_sym%%(sum unit t)%%(last%%t (cons%%t a (cons%%t x l)))%%(last%%t (cons%%t x l)) (Eq_sym%%(sum unit t)%%(last%%t (cons%%t x l))%%(last%%t (cons%%t a (cons%%t x l))) (H x a))) ([z:sum unit t]Eq%%(sum unit t) z z) (Eq_refl%%(sum unit t) (last%%t (cons%%t x l))))];
[last_resp_append : {t|SET}{l,m:list t}{a:t}Eq%%(sum unit t) (last%%t (append%%t l (cons%%t a m))) (last%%t (cons%%t a m))
  = [t|SET][l,m:list t][a:t]list_ind%%t ([l'5:list t]Eq%%(sum unit t) (last%%t (append%%t l'5 (cons%%t a m))) (last%%t (cons%%t a m))) (Eq_refl%%(sum unit t) (last%%t (append%%t (nil t) (cons%%t a m)))) ([x:t][l1:list t][H:Eq%%(sum unit t) (last%%t (append%%t l1 (cons%%t a m))) (last%%t (cons%%t a m))]Eq_subst%%bool%%false%%(nil_test%%t (append%%t l1 (cons%%t a m))) (Eq_sym%%bool%%(nil_test%%t (append%%t l1 (cons%%t a m)))%%false (nil_test_on_append%%t l1 m a)) ([z:bool]Eq%%(sum unit t) (if%%(sum unit t) z (in2%%unit%%t x) (last%%t (append%%t l1 (cons%%t a m)))) (last%%t (cons%%t a m))) H) l];
[last_gives_last : {t|SET}{l:list t}{a:t}Eq%%(sum unit t) (last%%t (append%%t l (cons%%t a (nil t)))) (in2%%unit%%t a)
  = [t|SET][l:list t][a:t]list_ind%%t ([l'4:list t]Eq%%(sum unit t) (last%%t (append%%t l'4 (cons%%t a (nil t)))) (in2%%unit%%t a)) (Eq_refl%%(sum unit t) (last%%t (append%%t (nil t) (cons%%t a (nil t))))) ([x:t][l1:list t][H:Eq%%(sum unit t) (last%%t (append%%t l1 (cons%%t a (nil t)))) (in2%%unit%%t a)]Eq_subst%%bool%%false%%(nil_test%%t (append%%t l1 (cons%%t a (nil t)))) (Eq_sym%%bool%%(nil_test%%t (append%%t l1 (cons%%t a (nil t))))%%false (nil_test_on_append%%t l1 (nil t) a)) ([z:bool]Eq%%(sum unit t) (if%%(sum unit t) z (in2%%unit%%t x) (last%%t (append%%t l1 (cons%%t a (nil t))))) (in2%%unit%%t a)) H) l];
[prune_resp_cons : {t|SET}{l:list t}{a,b:t}Eq%%(sum unit (list t)) (prune%%t (cons%%t b (cons%%t a l))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'5:list t]in2%%unit%%(list t) (cons%%t b l'5)) (prune%%t (cons%%t a l)))
  = [t|SET]list_ind%%t ([l:list t]{a,b:t}Eq%%(sum unit (list t)) (prune%%t (cons%%t b (cons%%t a l))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'5:list t]in2%%unit%%(list t) (cons%%t b l'5)) (prune%%t (cons%%t a l)))) ([a,b:t]Eq_refl%%(sum unit (list t)) (prune%%t (cons%%t b (cons%%t a (nil t))))) ([x:t][l:list t][H:{a,b:t}Eq%%(sum unit (list t)) (prune%%t (cons%%t b (cons%%t a l))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'6:list t]in2%%unit%%(list t) (cons%%t b l'6)) (prune%%t (cons%%t a l)))][a,b:t]Eq_subst%%(sum unit (list t))%%(prune%%t (cons%%t a (cons%%t x l)))%%(case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'7:list t]in2%%unit%%(list t) (cons%%t a l'7)) (prune%%t (cons%%t x l))) (Eq_sym%%(sum unit (list t))%%(case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'7:list t]in2%%unit%%(list t) (cons%%t a l'7)) (prune%%t (cons%%t x l)))%%(prune%%t (cons%%t a (cons%%t x l))) (Eq_sym%%(sum unit (list t))%%(prune%%t (cons%%t a (cons%%t x l)))%%(case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'7:list t]in2%%unit%%(list t) (cons%%t a l'7)) (prune%%t (cons%%t x l))) (H x a))) ([z:sum unit (list t)]Eq%%(sum unit (list t)) (prune%%t (cons%%t b (cons%%t a (cons%%t x l)))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t b l'2)) z)) (Eq_refl%%(sum unit (list t)) (prune%%t (cons%%t b (cons%%t a (cons%%t x l))))))];
[prune_non_empty_is_list : {t|SET}{l:list t}{a:t}Ex%%(list t) ([m:list t]Eq%%(sum unit (list t)) (prune%%t (cons%%t a l)) (in2%%unit%%(list t) m))
  = [t|SET]list_ind%%t ([l:list t]{a:t}Ex%%(list t) ([m:list t]Eq%%(sum unit (list t)) (prune%%t (cons%%t a l)) (in2%%unit%%(list t) m))) ([a:t]ExIntro%%(list t) (nil t) ([m:list t]Eq%%(sum unit (list t)) (prune%%t (cons%%t a (nil t))) (in2%%unit%%(list t) m)) (Eq_refl%%(sum unit (list t)) (prune%%t (cons%%t a (nil t))))) ([x:t][l:list t][H:{a:t}Ex%%(list t) ([m:list t]Eq%%(sum unit (list t)) (prune%%t (cons%%t a l)) (in2%%unit%%(list t) m))][a:t]H x (Ex%%(list t) ([m:list t]Eq%%(sum unit (list t)) (prune%%t (cons%%t a (cons%%t x l))) (in2%%unit%%(list t) m))) ([t1:list t][H1:Eq%%(sum unit (list t)) (prune%%t (cons%%t x l)) (in2%%unit%%(list t) t1)]ExIntro%%(list t) (cons%%t a t1) ([m:list t]Eq%%(sum unit (list t)) (prune%%t (cons%%t a (cons%%t x l))) (in2%%unit%%(list t) m)) (Eq_subst%%(sum unit (list t))%%(in2%%unit%%(list t) t1)%%(prune%%t (cons%%t x l)) (Eq_sym%%(sum unit (list t))%%(prune%%t (cons%%t x l))%%(in2%%unit%%(list t) t1) H1) ([z:sum unit (list t)]Eq%%(sum unit (list t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t a l'2)) z) (in2%%unit%%(list t) (cons%%t a t1))) (Eq_refl%%(sum unit (list t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t a l'2)) (in2%%unit%%(list t) t1))))))];
[prune_resp_append : {t|SET}{l,m:list t}{a:t}Eq%%(sum unit (list t)) (prune%%t (append%%t l (cons%%t a m))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x:list t]in2%%unit%%(list t) (append%%t l x)) (prune%%t (cons%%t a m)))
  = [t|SET][l,m:list t][a:t]list_ind%%t ([l'5:list t]Eq%%(sum unit (list t)) (prune%%t (append%%t l'5 (cons%%t a m))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x:list t]in2%%unit%%(list t) (append%%t l'5 x)) (prune%%t (cons%%t a m)))) (prune_non_empty_is_list%%t m a (Eq%%(sum unit (list t)) (prune%%t (append%%t (nil t) (cons%%t a m))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x:list t]in2%%unit%%(list t) (append%%t (nil t) x)) (prune%%t (cons%%t a m)))) ([t1:list t][H:Eq%%(sum unit (list t)) (prune%%t (cons%%t a m)) (in2%%unit%%(list t) t1)]Eq_subst%%(sum unit (list t))%%(in2%%unit%%(list t) t1)%%(prune%%t (cons%%t a m)) (Eq_sym%%(sum unit (list t))%%(prune%%t (cons%%t a m))%%(in2%%unit%%(list t) t1) H) ([z:sum unit (list t)]Eq%%(sum unit (list t)) z (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x:list t]in2%%unit%%(list t) (append%%t (nil t) x)) z)) (Eq_refl%%(sum unit (list t)) (in2%%unit%%(list t) t1)))) ([x:t][l1:list t][H:Eq%%(sum unit (list t)) (prune%%t (append%%t l1 (cons%%t a m))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x'7:list t]in2%%unit%%(list t) (append%%t l1 x'7)) (prune%%t (cons%%t a m)))]prune_non_empty_is_list%%t m a (Eq%%(sum unit (list t)) (prune%%t (append%%t (cons%%t x l1) (cons%%t a m))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x'8:list t]in2%%unit%%(list t) (append%%t (cons%%t x l1) x'8)) (prune%%t (cons%%t a m)))) ([t1:list t][H1:Eq%%(sum unit (list t)) (prune%%t (cons%%t a m)) (in2%%unit%%(list t) t1)]Eq_subst%%(sum unit (list t))%%(in2%%unit%%(list t) t1)%%(prune%%t (cons%%t a m)) (Eq_sym%%(sum unit (list t))%%(prune%%t (cons%%t a m))%%(in2%%unit%%(list t) t1) H1) ([z:sum unit (list t)]Eq%%(sum unit (list t)) (prune%%t (append%%t (cons%%t x l1) (cons%%t a m))) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x'2:list t]in2%%unit%%(list t) (append%%t (cons%%t x l1) x'2)) z)) (Eq_subst%%bool%%false%%(nil_test%%t (append%%t l1 (cons%%t a m))) (Eq_sym%%bool%%(nil_test%%t (append%%t l1 (cons%%t a m)))%%false (nil_test_on_append%%t l1 m a)) ([z:bool]Eq%%(sum unit (list t)) (if|(sum unit (list t)) z (in2%%unit%%(list t) (nil t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t x l'2)) (prune%%t (append%%t l1 (cons%%t a m))))) (in2%%unit%%(list t) (append%%t (cons%%t x l1) t1))) (Eq_subst%%(sum unit (list t))%%(case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x'10:list t]in2%%unit%%(list t) (append%%t l1 x'10)) (prune%%t (cons%%t a m)))%%(prune%%t (append%%t l1 (cons%%t a m))) (Eq_sym%%(sum unit (list t))%%(prune%%t (append%%t l1 (cons%%t a m)))%%(case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x'10:list t]in2%%unit%%(list t) (append%%t l1 x'10)) (prune%%t (cons%%t a m))) H) ([z:sum unit (list t)]Eq%%(sum unit (list t)) (if|(sum unit (list t)) false (in2%%unit%%(list t) (nil t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t x l'2)) z)) (in2%%unit%%(list t) (append%%t (cons%%t x l1) t1))) (Eq_subst%%(sum unit (list t))%%(in2%%unit%%(list t) t1)%%(prune%%t (cons%%t a m)) (Eq_sym%%(sum unit (list t))%%(prune%%t (cons%%t a m))%%(in2%%unit%%(list t) t1) H1) ([z:sum unit (list t)]Eq%%(sum unit (list t)) (if|(sum unit (list t)) false (in2%%unit%%(list t) (nil t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t x l'2)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([x'2:list t]in2%%unit%%(list t) (append%%t l1 x'2)) z))) (in2%%unit%%(list t) (append%%t (cons%%t x l1) t1))) (Eq_refl%%(sum unit (list t)) (in2%%unit%%(list t) (cons%%t x (append%%t l1 t1))))))))) l];
[prune_deletes_tip : {t|SET}{x:t}{l:list t}Eq%%(sum unit (list t)) (prune%%t (append%%t l (cons%%t x (nil t)))) (in2%%unit%%(list t) l)
  = [t|SET][x:t]list_ind%%t ([l:list t]Eq%%(sum unit (list t)) (prune%%t (append%%t l (cons%%t x (nil t)))) (in2%%unit%%(list t) l)) (Eq_refl%%(sum unit (list t)) (prune%%t (append%%t (nil t) (cons%%t x (nil t))))) ([x1:t][l:list t][H:Eq%%(sum unit (list t)) (prune%%t (append%%t l (cons%%t x (nil t)))) (in2%%unit%%(list t) l)]Eq_subst%%(sum unit (list t))%%(in2%%unit%%(list t) l)%%(prune%%t (append%%t l (cons%%t x (nil t)))) (Eq_sym%%(sum unit (list t))%%(prune%%t (append%%t l (cons%%t x (nil t))))%%(in2%%unit%%(list t) l) H) ([z:sum unit (list t)]Eq%%(sum unit (list t)) (if|(sum unit (list t)) (nil_test%%t (append%%t l (cons%%t x (nil t)))) (in2%%unit%%(list t) (nil t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t x1 l'2)) z)) (in2%%unit%%(list t) (cons%%t x1 l))) (Eq_subst%%bool%%false%%(nil_test%%t (append%%t l (cons%%t x (nil t)))) (Eq_sym%%bool%%(nil_test%%t (append%%t l (cons%%t x (nil t))))%%false (nil_test_on_append%%t l (nil t) x)) ([z:bool]Eq%%(sum unit (list t)) (if|(sum unit (list t)) z (in2%%unit%%(list t) (nil t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t x1 l'2)) (in2%%unit%%(list t) l))) (in2%%unit%%(list t) (cons%%t x1 l))) (Eq_refl%%(sum unit (list t)) (if|(sum unit (list t)) false (in2%%unit%%(list t) (nil t)) (case%%unit%%(list t)%%(sum unit (list t)) ([_:unit]in1%%unit%%(list t) void) ([l'2:list t]in2%%unit%%(list t) (cons%%t x1 l'2)) (in2%%unit%%(list t) l))))))];

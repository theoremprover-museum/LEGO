Module lib_nat_Lt_ML Import "lib_ML" "lib_nat_Lt";
[complete_elimination : {P:nat->TYPE}{wf_ih:{n:nat}({x:nat}(Lt x n)->P x)->P n}{m:nat}P m
  = [P:nat->TYPE][wf_ih:{n:nat}({x:nat}(Lt x n)->P x)->P n][m:nat]wf_ih m (nat_elim ([m'4:nat]{x:nat}(Lt x m'4)->P x) ([x:nat][H:Lt x zero]empty_elim ([_:empty]P x) (absurd_impl_empty (not_n_Lt_zero x H))) ([x1:nat][x1_ih:{x:nat}(Lt x x1)->P x][x:nat][H:Lt x (suc x1)]wf_ih x ([x2:nat][H1:Lt x2 x]x1_ih x2 (H (Lt x2 x1) ([t:nat][H2:Eq%%nat (plus x (suc t)) (suc x1)]Lt_resp_pred x2 x1 (Eq_subst%%nat%%(plus x (suc t))%%(suc x1) (Eq_sym%%nat%%(suc x1)%%(plus x (suc t)) (Eq_sym%%nat%%(plus x (suc t))%%(suc x1) H2)) ([z:nat]Lt (suc x2) z) (Eq_subst%%nat%%(suc (plus x t))%%(plus x (suc t)) (Eq_sym%%nat%%(plus x (suc t))%%(suc (plus x t)) (plus_suc x t)) ([z:nat]Lt (suc x2) z) (Lt_resp_suc x2 (plus x t) (Eq_subst%%nat%%(plus t x)%%(plus x t) (Eq_sym%%nat%%(plus x t)%%(plus t x) (plus_commutes x t)) ([z:nat]Lt x2 z) (Lt_resp_plus_right%%t%%x2%%x H1))))))))) m)];
[well_founded_elimination : {t|TYPE}{f:t->nat}{P:t->TYPE}{ih:{x:t}({y:t}(Lt (f y) (f x))->P y)->P x}{z:t}P z
  = [t|TYPE][f:t->nat][P:t->TYPE][ih:{x:t}({y:t}(Lt (f y) (f x))->P y)->P x][z:t]complete_elimination ([n:nat]{y:t}(Eq%%nat n (f y))->P y) ([n:nat][H:{x:nat}(Lt x n)->{y:t}(Eq%%nat x (f y))->P y][y:t][H1:Eq%%nat n (f y)]ih y ([y1:t][H2:Lt (f y1) (f y)]H (f y1) (Eq_subst%%nat%%(f y)%%n (Eq_sym%%nat%%n%%(f y) H1) ([z'1:nat]Lt (f y1) z'1) H2) y1 (Eq_refl%%nat (f y1)))) (f z) z (Eq_refl%%nat (f z))];

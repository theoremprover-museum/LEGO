Module lib_list_bool Import "lib_list_basics" "lib_bool_thms";
[nil_test : {s|SET}(list s)->bool
  = [s|SET]list_iter%%s%%bool true ([_:s][_:bool]false)];
[exist_list : {t|SET}(t->bool)->(list t)->bool
  = [t|SET][P:t->bool]list_iter%%t%%bool false ([x:t][b:bool]orelse (P x) b)];
[all_list : {t|SET}(t->bool)->(list t)->bool
  = [t|SET][P:t->bool]list_iter%%t%%bool true ([x:t][b:bool]andalso (P x) b)];
[member : {t|SET}(t->t->bool)->t->(list t)->bool
  = [t|SET][eq:t->t->bool][x:t]exist_list%%t (eq x)];
[list_eq : {t|SET}(t->t->bool)->(list t)->(list t)->bool
  = [t|SET][eq:t->t->bool]list_rec%%t%%((list t)->bool) (list_iter%%t%%bool true ([_:t][_:bool]false)) ([hd:t][tl:list t][eq_tl:(list t)->bool]list_rec%%t%%bool false ([hd':t][tl':list t][_:bool]andalso (eq hd hd') (eq_tl tl')))];
[del_first : {t|SET}(t->t->bool)->t->(list t)->list t
  = [t|SET][eq:t->t->bool][x:t]list_rec%%t%%(list t) (nil t) ([hd:t][tl,prev:list t]if%%(list t) (eq x hd) tl (cons%%t hd prev))];
[del_all : {t|SET}(t->t->bool)->t->(list t)->list t
  = [t|SET][eq:t->t->bool][x:t]list_iter%%t%%(list t) (nil t) ([hd:t][prev:list t]if%%(list t) (eq x hd) prev (cons%%t hd prev))];
[list_sub : {A,B|SET}{eq:A->bool}{a:A}(list A)->list A
  = [A,B|SET][eq:A->bool][a:A]map%%A%%A ([b:A]if%%A (eq b) a b)];
[exist_list_append_lem : {t|SET}{P:t->bool}{j,k:list t}Eq%%bool (exist_list%%t P (append%%t j k)) (orelse (exist_list%%t P j) (exist_list%%t P k))
  = [t|SET][P:t->bool][j,k:list t]list_ind%%t ([j'5:list t]Eq%%bool (exist_list%%t P (append%%t j'5 k)) (orelse (exist_list%%t P j'5) (exist_list%%t P k))) (Eq_refl%%bool (exist_list%%t P (append%%t (nil t) k))) ([x:t][l:list t][H:Eq%%bool (exist_list%%t P (append%%t l k)) (orelse (exist_list%%t P l) (exist_list%%t P k))]Eq_subst%%bool%%(orelse (P x) (orelse (exist_list%%t P l) (exist_list%%t P k)))%%(orelse (orelse (P x) (exist_list%%t P l)) (exist_list%%t P k)) (Eq_sym%%bool%%(orelse (orelse (P x) (exist_list%%t P l)) (exist_list%%t P k))%%(orelse (P x) (orelse (exist_list%%t P l) (exist_list%%t P k))) (orelse_assoc (P x) (exist_list%%t P l) (exist_list%%t P k))) ([z:bool]Eq%%bool (orelse (P x) (exist_list%%t P (append%%t l k))) z) (Eq_subst%%bool%%(orelse (exist_list%%t P l) (exist_list%%t P k))%%(exist_list%%t P (append%%t l k)) (Eq_sym%%bool%%(exist_list%%t P (append%%t l k))%%(orelse (exist_list%%t P l) (exist_list%%t P k)) H) ([z:bool]Eq%%bool (orelse (P x) z) (orelse (P x) (orelse (exist_list%%t P l) (exist_list%%t P k)))) (Eq_refl%%bool (orelse (P x) (orelse (exist_list%%t P l) (exist_list%%t P k)))))) j];
[member_append_lem : {t|SET}{eq_on_t:t->t->bool}{x:t}{j,k:list t}Eq%%bool (member%%t eq_on_t x (append%%t j k)) (orelse (member%%t eq_on_t x j) (member%%t eq_on_t x k))
  = [t|SET][eq_on_t:t->t->bool][x:t][j,k:list t]exist_list_append_lem%%t (eq_on_t x) j k];
[nil_test_true_equiv_Eq_nil : {t|SET}{l:list t}iff (Eq%%bool (nil_test%%t l) true) (Eq%%(list t) l (nil t))
  = [t|SET]list_ind%%t ([l:list t]iff (Eq%%bool (nil_test%%t l) true) (Eq%%(list t) l (nil t))) (pair%%((Eq%%bool (nil_test%%t (nil t)) true)->Eq%%(list t) (nil t) (nil t))%%((Eq%%(list t) (nil t) (nil t))->Eq%%bool (nil_test%%t (nil t)) true) ([H:Eq%%bool (nil_test%%t (nil t)) true]Eq_refl%%(list t) (nil t)) ([H:Eq%%(list t) (nil t) (nil t)]Eq_refl%%bool (nil_test%%t (nil t)))) ([x:t][l:list t][H:iff (Eq%%bool (nil_test%%t l) true) (Eq%%(list t) l (nil t))]pair%%((Eq%%bool (nil_test%%t (cons%%t x l)) true)->Eq%%(list t) (cons%%t x l) (nil t))%%((Eq%%(list t) (cons%%t x l) (nil t))->Eq%%bool (nil_test%%t (cons%%t x l)) true) ([H1:Eq%%bool (nil_test%%t (cons%%t x l)) true]true_not_false (Eq_sym%%bool%%(nil_test%%t (cons%%t x l))%%true H1) (Eq%%(list t) (cons%%t x l) (nil t))) ([H1:Eq%%(list t) (cons%%t x l) (nil t)]nil_not_cons%%t l x (Eq_sym%%(list t)%%(cons%%t x l)%%(nil t) H1) (Eq%%bool (nil_test%%t (cons%%t x l)) true)))];
[nil_test_false_equiv_Eq_cons : {t|SET}{l:list t}iff (Eq%%bool (nil_test%%t l) false) (Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) l (cons%%t a m))))
  = [t|SET]list_ind%%t ([l:list t]iff (Eq%%bool (nil_test%%t l) false) (Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) l (cons%%t a m))))) (pair%%((Eq%%bool (nil_test%%t (nil t)) false)->Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (nil t) (cons%%t a m))))%%((Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (nil t) (cons%%t a m))))->Eq%%bool (nil_test%%t (nil t)) false) ([H:Eq%%bool (nil_test%%t (nil t)) false]true_not_false H (Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (nil t) (cons%%t a m))))) ([H:Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (nil t) (cons%%t a m)))]H (Eq%%bool (nil_test%%t (nil t)) false) ([t1:t][H1:Ex%%(list t) ([m:list t]Eq%%(list t) (nil t) (cons%%t t1 m))]H1 (Eq%%bool (nil_test%%t (nil t)) false) ([t2:list t][H2:Eq%%(list t) (nil t) (cons%%t t1 t2)]nil_not_cons%%t t2 t1 H2 (Eq%%bool (nil_test%%t (nil t)) false))))) ([x:t][l:list t][H:iff (Eq%%bool (nil_test%%t l) false) (Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) l (cons%%t a m))))]pair%%((Eq%%bool (nil_test%%t (cons%%t x l)) false)->Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (cons%%t x l) (cons%%t a m))))%%((Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (cons%%t x l) (cons%%t a m))))->Eq%%bool (nil_test%%t (cons%%t x l)) false) ([H1:Eq%%bool (nil_test%%t (cons%%t x l)) false]ExIntro%%t x ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (cons%%t x l) (cons%%t a m))) (ExIntro%%(list t) l ([m:list t]Eq%%(list t) (cons%%t x l) (cons%%t x m)) (Eq_refl%%(list t) (cons%%t x l)))) ([H1:Ex%%t ([a:t]Ex%%(list t) ([m:list t]Eq%%(list t) (cons%%t x l) (cons%%t a m)))]Eq_refl%%bool (nil_test%%t (cons%%t x l))))];
[nil_test_on_append : {t|SET}{l,m:list t}{a:t}Eq%%bool (nil_test%%t (append%%t l (cons%%t a m))) false
  = [t|SET][l,m:list t][a:t]list_ind%%t ([l'5:list t]Eq%%bool (nil_test%%t (append%%t l'5 (cons%%t a m))) false) (Eq_refl%%bool (nil_test%%t (append%%t (nil t) (cons%%t a m)))) ([x:t][l1:list t][H:Eq%%bool (nil_test%%t (append%%t l1 (cons%%t a m))) false]Eq_refl%%bool (nil_test%%t (append%%t (cons%%t x l1) (cons%%t a m)))) l];

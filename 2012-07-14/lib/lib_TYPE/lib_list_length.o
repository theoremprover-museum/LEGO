Module lib_list_length Import "lib_list_basics" "lib_nat_Lt";
[length : {s|SET}(list s)->nat
  = [s|SET]list_iter%%s%%nat zero ([_:s]suc)];
[nth : nat->{t|SET}(list t)->t->t
  = [n:nat][t|SET][l:list t][x:t][z=[k:list t]hd%%t x k][s=[_:nat][f:(list t)->t][k:list t]f (tail%%t k)]nat_rec%%({k:list t}t) z s n l];
[build_list : {s|SET}(nat->s)->nat->list s
  = [s|SET][f:nat->s]nat_rec%%(list s) (nil s) ([k:nat]cons%%s (f k))];
[list_length_induction : {t|SET}{P:(list t)->Prop}{ih:{l:list t}({x:list t}(Lt (length%%t x) (length%%t l))->P x)->P l}{k:list t}P k
  = [t|SET][P:(list t)->Prop][ih:{l:list t}({x:list t}(Lt (length%%t x) (length%%t l))->P x)->P l][k:list t]well_founded_induction%%(list t) (length|t) P ih k];
[length_zero_nil : {s|SET}{l:list s}(Eq%%nat (length%%s l) zero)->Eq%%(list s) l (nil s)
  = [s|SET][l:list s]list_ind%%s ([l'3:list s](Eq%%nat (length%%s l'3) zero)->Eq%%(list s) l'3 (nil s)) ([H:Eq%%nat (length%%s (nil s)) zero]Eq_refl%%(list s) (nil s)) ([x:s][l1:list s][H:(Eq%%nat (length%%s l1) zero)->Eq%%(list s) l1 (nil s)][H1:Eq%%nat (length%%s (cons%%s x l1)) zero]zero_not_suc (list_elim%%s ([_:list s]nat) zero ([y:s][_:list s]([_:s]suc) y) l1) (Eq_sym%%nat%%(length%%s (cons%%s x l1))%%zero H1) (Eq%%(list s) (cons%%s x l1) (nil s))) l];
[length_map : {s,t|SET}{l:list s}{f:s->t}Eq%%nat (length%%t (map%%s%%t f l)) (length%%s l)
  = [s,t|SET][l:list s][f:s->t]list_ind%%s ([l'5:list s]Eq%%nat (length%%t (map%%s%%t f l'5)) (length%%s l'5)) (Eq_refl%%nat (length%%t (map%%s%%t f (nil s)))) ([x:s][l1:list s]Eq_resp%%nat%%nat suc%%(length%%t (map%%s%%t f l1))%%(length%%s l1)) l];
[length_build_list : {s|SET}{f:nat->s}{n:nat}Eq%%nat (length%%s (build_list%%s f n)) n
  = [s|SET][f:nat->s][n:nat]nat_ind ([n'4:nat]Eq%%nat (length%%s (build_list%%s f n'4)) n'4) (Eq_refl%%nat (length%%s (build_list%%s f zero))) ([n1:nat]Eq_resp%%nat%%nat suc%%(length%%s (build_list%%s f n1))%%n1) n];
[length_append : {s|SET}{l1,l2:list s}Eq%%nat (length%%s (append%%s l1 l2)) (plus (length%%s l1) (length%%s l2))
  = [s|SET][l1,l2:list s]list_ind%%s ([l1'4:list s]Eq%%nat (length%%s (append%%s l1'4 l2)) (plus (length%%s l1'4) (length%%s l2))) (Eq_refl%%nat (length%%s (append%%s (nil s) l2))) ([x:s][l:list s]Eq_resp%%nat%%nat suc%%(length%%s (append%%s l l2))%%(plus (length%%s l) (length%%s l2))) l1];

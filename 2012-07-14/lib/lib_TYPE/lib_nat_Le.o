Module lib_nat_Le Import "lib_nat_times_thms" "lib_nat_minus_thms";
[Le : nat->nat->Prop
  = [n,m:nat]Ex%%nat ([k:nat]Eq%%nat (plus n k) m)];
[Le_plus_lemma1 : {m,n|nat}Le m (plus m n)
  = [m,n|nat]ExIntro%%nat n ([k:nat]Eq%%nat (plus m k) (plus m n)) (Eq_refl%%nat (plus m n))];
[Le_plus_lemma2 : {m,n|nat}Le n (plus m n)
  = [m,n|nat]Eq_subst%%nat%%(plus n m)%%(plus m n) (Eq_sym%%nat%%(plus m n)%%(plus n m) (plus_commutes m n)) ([z:nat]Le n z) (Le_plus_lemma1%%n%%m)];
[Le_suc_lemma : {m,n|nat}(Le m (suc n))->(Le m n \/ Eq%%nat (suc n) m)
  = [m,n|nat][H:Le m (suc n)]H (Le m n \/ Eq%%nat (suc n) m) (nat_ind ([t:nat](Eq%%nat (plus m t) (suc n))->(Le m n \/ Eq%%nat (suc n) m)) ([H1:Eq%%nat (plus m zero) (suc n)]inr%%(Le m n)%%(Eq%%nat (suc n) m) (Eq_subst%%nat%%(plus m zero)%%m (Eq_sym%%nat%%m%%(plus m zero) (Eq_sym%%nat%%(plus m zero)%%m (plus_zero m))) ([z:nat]Eq%%nat (suc n) z) (Eq_sym%%nat%%(plus m zero)%%(suc n) H1))) ([n1:nat][H1:(Eq%%nat (plus m n1) (suc n))->(Le m n \/ Eq%%nat (suc n) m)][H2:Eq%%nat (plus m (suc n1)) (suc n)]inl%%(Le m n)%%(Eq%%nat (suc n) m) (ExIntro%%nat n1 ([k:nat]Eq%%nat (plus m k) n) (suc_injective%%(plus m n1)%%n (Eq_subst%%nat%%(plus m (suc n1))%%(suc n) (Eq_sym%%nat%%(suc n)%%(plus m (suc n1)) (Eq_sym%%nat%%(plus m (suc n1))%%(suc n) H2)) ([z:nat]Eq%%nat (suc (plus m n1)) z) (Eq_sym%%nat%%(plus m (suc n1))%%(suc (plus m n1)) (plus_suc m n1)))))))];
[Le_antisym : {m,n:nat}(Le m n)->(Le n m)->Eq%%nat n m
  = [m,n:nat][h1:Le m n][h2:Le n m]h1 (Eq%%nat n m) ([t:nat][H:Eq%%nat (plus m t) n]h2 (Eq%%nat n m) ([t1:nat][H1:Eq%%nat (plus n t1) m]Eq_subst%%nat%%(plus m t)%%n (Eq_sym%%nat%%n%%(plus m t) (Eq_sym%%nat%%(plus m t)%%n H)) ([z:nat]Eq%%nat z m) (Eq_subst%%nat%%zero%%t (Eq_sym%%nat%%t%%zero (fst%%(Eq%%nat t zero)%%(Eq%%nat t1 zero) (plus_strict|t|t1 (cancel_plus n (plus t t1) zero (Eq_subst%%nat%%n%%(plus n zero) (Eq_sym%%nat%%(plus n zero)%%n (plus_zero n)) ([z:nat]Eq%%nat (plus n (plus t t1)) z) (Eq_subst%%nat%%(plus t1 t)%%(plus t t1) (Eq_sym%%nat%%(plus t t1)%%(plus t1 t) (plus_commutes t t1)) ([z:nat]Eq%%nat (plus n z) n) (Eq_subst%%nat%%(plus (plus n t1) t)%%(plus n (plus t1 t)) (Eq_sym%%nat%%(plus n (plus t1 t))%%(plus (plus n t1) t) (Eq_sym%%nat%%(plus (plus n t1) t)%%(plus n (plus t1 t)) (plus_assoc n t1 t))) ([z:nat]Eq%%nat z n) (Eq_subst%%nat%%m%%(plus n t1) (Eq_sym%%nat%%(plus n t1)%%m H1) ([z:nat]Eq%%nat (plus z t) n) H)))))))) ([z:nat]Eq%%nat (plus m z) m) (plus_zero m))))];
[Le_suc : {x:nat}Le x (suc x)
  = [x:nat]ExIntro%%nat one ([k:nat]Eq%%nat (plus x k) (suc x)) (Eq_subst%%nat%%(plus one x)%%(plus x one) (Eq_sym%%nat%%(plus x one)%%(plus one x) (plus_commutes|x|one)) ([z:nat]Eq%%nat z (suc x)) (Eq_refl%%nat (plus one x)))];
[Le_resp_suc : {x,y:nat}(Le x y)->Le (suc x) (suc y)
  = [x,y:nat][H:Le x y]H (Le (suc x) (suc y)) ([t:nat][H1:Eq%%nat (plus x t) y]ExIntro%%nat t ([k:nat]Eq%%nat (plus (suc x) k) (suc y)) (Eq_subst%%nat%%(plus x t)%%y (Eq_sym%%nat%%y%%(plus x t) (Eq_sym%%nat%%(plus x t)%%y H1)) ([z:nat]Eq%%nat (plus (suc x) t) (suc z)) (Eq_refl%%nat (plus (suc x) t))))];
[Le_resp_pred : {x,y:nat}(Le (suc x) (suc y))->Le x y
  = [x,y:nat][H:Le (suc x) (suc y)]H (Le x y) ([t:nat][H1:Eq%%nat (plus (suc x) t) (suc y)]ExIntro%%nat t ([k:nat]Eq%%nat (plus x k) y) (suc_injective%%(plus x t)%%y (Eq_subst%%nat%%(plus (suc x) t)%%(suc y) (Eq_sym%%nat%%(suc y)%%(plus (suc x) t) (Eq_sym%%nat%%(plus (suc x) t)%%(suc y) H1)) ([z:nat]Eq%%nat (suc (plus x t)) z) (Eq_refl%%nat (suc (plus x t))))))];
[Le_zero_n : {n:nat}Le zero n
  = [n:nat]ExIntro%%nat n ([k:nat]Eq%%nat (plus zero k) n) (Eq_refl%%nat (plus zero n))];
[Le_incl_pred : {x:nat}Le (pred x) x
  = nat_ind ([x:nat]Le (pred x) x) (Le_zero_n zero) ([n:nat][ih:Le (pred n) n]ExIntro%%nat one ([k:nat]Eq%%nat (plus (pred (suc n)) k) (suc n)) (Eq_subst%%nat%%(plus one n)%%(plus n one) (Eq_sym%%nat%%(plus n one)%%(plus one n) (plus_commutes|n|one)) ([z:nat]Eq%%nat z (suc n)) (Eq_refl%%nat (plus one n))))];
[not_Le_zero_n : {n:nat}not (Le (suc n) zero)
  = [n:nat][H:Le (suc n) zero]H absurd ([t:nat][H1:Eq%%nat (plus (suc n) t) zero]zero_not_suc (plus n t) (Eq_subst%%nat%%(plus (suc n) t)%%zero (Eq_sym%%nat%%zero%%(plus (suc n) t) (Eq_sym%%nat%%(plus (suc n) t)%%zero H1)) ([z:nat]Eq%%nat z (suc (plus n t))) (Eq_refl%%nat (plus (suc n) t))))];
[Le_suc_pred : {a,b|nat}(Le (suc a) b)->Le a (pred b)
  = ([Phi:{z:nat}{a|nat}(Le (suc a) z)->Le a (pred z)][a,b|nat]Phi b%%a) (nat_elim ([z:nat]{a|nat}(Le (suc a) z)->Le a (pred z)) ([a|nat][H:Le (suc a) zero]not_Le_zero_n a H (Le a (pred zero))) ([x1:nat][x1_ih:{a|nat}(Le (suc a) x1)->Le a (pred x1)][a|nat][H:Le (suc a) (suc x1)]Le_resp_pred a (pred (suc x1)) H))];
[eq_imp_Le : {x,y:nat}(Eq%%nat x y)->Le x y
  = [x,y:nat][H:Eq%%nat x y]ExIntro%%nat zero ([k:nat]Eq%%nat (plus x k) y) (Eq_subst%%nat%%y%%x (Eq_sym%%nat%%x%%y H) ([z:nat]Eq%%nat (plus z zero) y) (plus_zero y))];
[Le_trans : {x,y,z|nat}(Le x y)->(Le y z)->Le x z
  = [x,y,z|nat][H:Le x y][H1:Le y z]H (Le x z) ([t:nat][H2:Eq%%nat (plus x t) y]H1 (Le x z) ([t1:nat][H3:Eq%%nat (plus y t1) z]ExIntro%%nat (plus t t1) ([k:nat]Eq%%nat (plus x k) z) (Eq_subst%%nat%%(plus y t1)%%z (Eq_sym%%nat%%z%%(plus y t1) (Eq_sym%%nat%%(plus y t1)%%z H3)) ([z'1:nat]Eq%%nat (plus x (plus t t1)) z'1) (Eq_subst%%nat%%(plus x t)%%y (Eq_sym%%nat%%y%%(plus x t) (Eq_sym%%nat%%(plus x t)%%y H2)) ([z'1:nat]Eq%%nat (plus x (plus t t1)) (plus z'1 t1)) (Eq_sym%%nat%%(plus (plus x t) t1)%%(plus x (plus t t1)) (plus_assoc x t t1))))))];
[Le_resp_plus : {x,y,z:nat}(Le x y)->Le (plus z x) (plus z y)
  = [x,y,z:nat]nat_ind ([z'4:nat](Le x y)->Le (plus z'4 x) (plus z'4 y)) ([H:Le x y]H) ([n:nat][H:(Le x y)->Le (plus n x) (plus n y)][H1:Le x y]Le_resp_suc (nat_elim ([_:nat]nat) x ([_:nat]suc) n) (nat_elim ([_:nat]nat) y ([_:nat]suc) n) (H H1)) z];
[Le_resp_sub : {x,y,z:nat}(Le (plus z x) (plus z y))->Le x y
  = [x,y,z:nat]nat_ind ([z'4:nat](Le (plus z'4 x) (plus z'4 y))->Le x y) ([H:Le (plus zero x) (plus zero y)]H) ([n:nat][H:(Le (plus n x) (plus n y))->Le x y][H1:Le (plus (suc n) x) (plus (suc n) y)]H (Le_resp_pred (plus n x) (plus n y) H1)) z];
[Le_resp_plus_both : {x,y,a,b:nat}(Le x y)->(Le a b)->Le (plus x a) (plus y b)
  = [x,y,a,b:nat][h1:Le x y][h2:Le a b]Le_trans%%(plus x a)%%(plus x b)%%(plus y b) (Le_resp_plus a b x h2) (Eq_subst%%nat%%(plus b x)%%(plus x b) (Eq_sym%%nat%%(plus x b)%%(plus b x) (plus_commutes x b)) ([z:nat]Le z (plus y b)) (Eq_subst%%nat%%(plus b y)%%(plus y b) (Eq_sym%%nat%%(plus y b)%%(plus b y) (plus_commutes y b)) ([z:nat]Le (plus b x) z) (Le_resp_plus x y b h1)))];
[Le_resp_times : {x,y,a:nat}(Le x y)->Le (times a x) (times a y)
  = [x,y,a:nat]nat_ind ([a'4:nat](Le x y)->Le (times a'4 x) (times a'4 y)) ([H:Le x y]eq_imp_Le (times zero x) (times zero y) (Eq_refl%%nat (times zero x))) ([n:nat][H:(Le x y)->Le (times n x) (times n y)][H1:Le x y]Le_resp_plus_both x y (nat_elim ([_:nat]nat) zero ([_:nat]plus x) n) (nat_elim ([_:nat]nat) zero ([_:nat]plus y) n) H1 (H H1)) a];
[Le_times_cancel : {x,y,a:nat}(Le (times x (suc a)) (times y (suc a)))->Le x y
  = [x,y,a:nat]nat_diagonal_ind ([x'4,y'5:nat](Le (times x'4 (suc a)) (times y'5 (suc a)))->Le x'4 y'5) ([m:nat][H:Le (times zero (suc a)) (times m (suc a))]Le_zero_n m) ([n:nat][H:Le (times (suc n) (suc a)) (times zero (suc a))]not_Le_zero_n (nat_elim ([_:nat]nat) (nat_elim ([_:nat]nat) zero ([_:nat]plus (suc a)) n) ([_:nat]suc) a) H (Le (suc n) zero)) ([n,m:nat][H:(Le (times n (suc a)) (times m (suc a)))->Le n m][H1:Le (times (suc n) (suc a)) (times (suc m) (suc a))]Le_resp_suc n m (H (Le_resp_sub (times n (suc a)) (times m (suc a)) (suc a) H1))) x y];
[Le_resp_times_both : {a,b,x,y:nat}(Le a b)->(Le x y)->Le (times a x) (times b y)
  = [a,b,x,y:nat][H:Le a b][H1:Le x y]Le_trans%%(times a x)%%(times a y)%%(times b y) (Le_resp_times x y a H1) (Eq_subst%%nat%%(times y a)%%(times a y) (Eq_sym%%nat%%(times a y)%%(times y a) (times_commutes|a|y)) ([z:nat]Le z (times b y)) (Eq_subst%%nat%%(times y b)%%(times b y) (Eq_sym%%nat%%(times b y)%%(times y b) (times_commutes|b|y)) ([z:nat]Le (times y a) z) (Le_resp_times a b y H)))];
[plus_inv_minus : {m,n:nat}(Le m n)->Eq%%nat n (plus (minus n m) m)
  = [m,n:nat][H:Le m n]H (Eq%%nat n (plus (minus n m) m)) ([t:nat][H1:Eq%%nat (plus m t) n]Eq_subst%%nat%%(plus m t)%%n (Eq_sym%%nat%%n%%(plus m t) (Eq_sym%%nat%%(plus m t)%%n H1)) ([z:nat]Eq%%nat z (plus (minus z m) m)) (Eq_subst%%nat%%(plus t m)%%(plus m t) (Eq_sym%%nat%%(plus m t)%%(plus t m) (plus_commutes|m|t)) ([z:nat]Eq%%nat z (plus (minus z m) m)) (Eq_resp%%nat%%nat ([t'6:nat]plus t'6 m)%%t%%(minus (plus t m) m) (Eq_subst%%nat%%(plus m t)%%(plus t m) (Eq_sym%%nat%%(plus t m)%%(plus m t) (plus_commutes|t|m)) ([z:nat]Eq%%nat t (minus z m)) (minus_inv_plus m t)))))];

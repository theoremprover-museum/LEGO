Module lib_list_misc Import "lib_list_length" "lib_list_partial";
[same_length : {s,t|SET}(list s)->(list t)->bool
  = [s,t|SET]list_iter%%s%%((list t)->bool) (list_iter%%t%%bool true ([_:t][_:bool]false)) ([_:s][prev:(list t)->bool]list_rec%%t%%bool false ([_:t][tl:list t][_:bool]prev tl))];
[Eq_length_imp_same_length_true : {t|SET}{l,m:list t}(Eq%%nat (length%%t l) (length%%t m))->is_true (same_length%%t%%t l m)
  = [t|SET]list_ind%%t ([l:list t]{m:list t}(Eq%%nat (length%%t l) (length%%t m))->is_true (same_length%%t%%t l m)) (list_ind%%t ([m:list t](Eq%%nat (length%%t (nil t)) (length%%t m))->is_true (same_length%%t%%t (nil t) m)) ([H:Eq%%nat (length%%t (nil t)) (length%%t (nil t))]Eq_refl%%bool (same_length%%t%%t (nil t) (nil t))) ([x:t][l:list t][H:(Eq%%nat (length%%t (nil t)) (length%%t l))->is_true (same_length%%t%%t (nil t) l)][H1:Eq%%nat (length%%t (nil t)) (length%%t (cons%%t x l))]true_not_false (zero_not_suc (list_elim%%t ([_:list t]nat) zero ([y:t][_:list t]([_:t]suc) y) l) H1 (Eq%%bool true false)) (is_true (same_length%%t%%t (nil t) (cons%%t x l))))) ([x:t][l:list t][H:{m:list t}(Eq%%nat (length%%t l) (length%%t m))->is_true (same_length%%t%%t l m)]list_ind%%t ([m:list t](Eq%%nat (length%%t (cons%%t x l)) (length%%t m))->is_true (same_length%%t%%t (cons%%t x l) m)) ([H1:Eq%%nat (length%%t (cons%%t x l)) (length%%t (nil t))]zero_not_suc (list_elim%%t ([_:list t]nat) zero ([y:t][_:list t]([_:t]suc) y) l) (Eq_sym%%nat%%(length%%t (cons%%t x l))%%(length%%t (nil t)) H1) (is_true (same_length%%t%%t (cons%%t x l) (nil t)))) ([x1:t][l1:list t][H1:(Eq%%nat (length%%t (cons%%t x l)) (length%%t l1))->is_true (same_length%%t%%t (cons%%t x l) l1)][H2:Eq%%nat (length%%t (cons%%t x l)) (length%%t (cons%%t x1 l1))]H l1 (suc_injective%%(length%%t l)%%(length%%t l1) H2)))];
